#pragma once

#include "common.h"

#include <boost/range/adaptor/indexed.hpp>
#include <boost/assign.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/algorithm/string/join.hpp>

#include <htslib/vcf.h>

// bool has_missing_data(const string& raw_alleles, const pair<int, int>& indices) {
//     if (!strchr("ACTG01", raw_alleles[indices.first])) {
//         return true;
//     }
//     if (!strchr("ACTG01", raw_alleles[indices.second])) {
//         return true;
//     }
//     return false;
// }

/*
// Clone of MSMC2
// TODO: Give credit
// TODO: Add support for ambiguous phasing?
void readSegSites(
    string filename, 
    const vector<pair<int, int>>& indices, 
    vector<vector<SegSite_t>>& ret
    ) {
    // format: chr position nr_calledSites [alleles] -> tab separated
    // if no alleles are given, assume M=2 and "01"
    // returns data for each pair of indices

    // Initialize the result
    ret.resize(0);
    ret.resize(indices.size(), vector<SegSite_t>());

    ifstream input(filename);

    position_t lastPos = -1;

    vector<string> fields;

    for (string line; getline(input, line);) {
        // Split into fields
        boost::algorithm::trim(line);
        boost::split(fields, line, boost::is_any_of("\t "));       
        position_t pos = stoi(fields[1]);
        long nrCalledSites = stoi(fields[2]);
        string raw_alleles = fields[3];
        
        // If this is the first row, then set the last position to 
        // be the number of called sites before current position

        // TODO: That seems wrong - it causes the first site to ignore the number of called sites?
        // But maybe it's better since it's often far from 0, and otherwise would be a strech of hom-s.
        if (lastPos == -1) {
            lastPos = pos - nrCalledSites;
        }

        BOOST_ASSERT_MSG(nrCalledSites <= pos - lastPos, "Number of called sites must be no more than the gap between consecutive positions");
        BOOST_ASSERT_MSG(nrCalledSites > 0, "Number of called sites must be positive");

        // Fill the data for each pair of indices
        int i = 0;
        for (const auto& ind : indices) {
            // If there is a missing allele at this position for this pair
            if (has_missing_data(raw_alleles, ind)) {

                // If there is missing data, encode it as a stretch of missing positions...
                if (nrCalledSites < pos - lastPos) {  // missing data
                    ret[i].push_back({pos - nrCalledSites, MISSING_STRETCH_MISSING_SITE});
                }
                // ...and then a stretch of hom positions.
                if (nrCalledSites > 1) {
                    ret[i].push_back({pos - 1, HOM_STRETCH_HOM_SITE});
                }
                // Finally, the actual observed position, which is missing.
                ret[i].push_back({pos, MISSING_STRETCH_MISSING_SITE});

                lastPos = pos;
            } 
            
            // Otherwise, no missing data at this position for this pair
            else {
                if (nrCalledSites < pos - lastPos) {  // missing data
                    ret[i].push_back({pos - nrCalledSites, MISSING_STRETCH_MISSING_SITE});
                }

                segment_type status = (raw_alleles[ind.first] == raw_alleles[ind.second] ? HOM_STRETCH_HOM_SITE : HOM_STRETCH_HET_SITE);
                ret[i].push_back({pos, status});
            }

            i++;
        }

        lastPos = pos;
    }
}*/

bool has_missing_data_all(const string& raw_alleles) {
    for (const char& c : raw_alleles) {
        if (!strchr("ACTG01", c)) {
            return true;
        }
    }
    return false;
}

void readSegSitesAll(
    string filename, 
    vector<SegSite_t>& ret
    ) {
    // format: chr position nr_calledSites [alleles] -> tab separated
    // if no alleles are given, assume M=2 and "01"
    // returns data for each pair of indices

    // Initialize the result
    ret.resize(0);

    ifstream input(filename);

    position_t lastPos = -1;

    vector<string> fields;

    for (string line; getline(input, line);) {
        // Split into fields
        boost::algorithm::trim(line);
        boost::split(fields, line, boost::is_any_of("\t "));       
        position_t pos = stoi(fields[1]);
        long nrCalledSites = stoi(fields[2]);
        string raw_alleles = fields[3];
        
        // If this is the first row, then set the last position to 
        // be the number of called sites before current position

        // TODO: That seems wrong - it causes the first site to ignore the number of called sites?
        // But maybe it's better since it's often far from 0, and otherwise would be a strech of hom-s.
        if (lastPos == -1) {
            lastPos = pos - nrCalledSites;
        }

        BOOST_ASSERT_MSG(nrCalledSites <= pos - lastPos, "Number of called sites must be no more than the gap between consecutive positions");
        BOOST_ASSERT_MSG(nrCalledSites > 0, "Number of called sites must be positive");

        vector<int32_t> int_alleles;
        for(char& c : raw_alleles) {
            if (c == '0') {
                int_alleles.push_back(0);
            } else if (c == '1') {
                int_alleles.push_back(1);
            } else {
                // TODO: Deal with this case
                //cout << "Warning: Only 0/1 alleles supported for now. Treating as 1" << endl;
                int_alleles.push_back(1);
            }
        }

        // If there is a missing allele at this position for this pair
        if (has_missing_data_all(raw_alleles)) {

            // If there is missing data, encode it as a stretch of missing positions...
            if (nrCalledSites < pos - lastPos) {  // missing data
                ret.push_back({pos - nrCalledSites, MISSING_STRETCH_MISSING_SITE, int_alleles});
            }
            // ...and then a stretch of hom positions.
            if (nrCalledSites > 1) {
                ret.push_back({pos - 1, HOM_STRETCH, int_alleles});
            }
            // Finally, the actual observed position, which is missing.
            ret.push_back({pos, MISSING_STRETCH_MISSING_SITE, int_alleles});

            lastPos = pos;
        } 
        
        // Otherwise, no missing data at this position for this pair
        else {
            if (nrCalledSites < pos - lastPos) {  // missing data
                ret.push_back({pos - nrCalledSites, MISSING_STRETCH_MISSING_SITE, int_alleles});
            }

            // We don't decide HOM_STRETCH_HOM_SITE or HOM_STRETCH_HET_SITE here
            ret.push_back({pos, HOM_STRETCH, int_alleles});
        }        

        lastPos = pos;
    }
}

// void chop_segsites(
//     const vector<SegSite_t>& segsites, 
//     long maxDistance,
//     vector<SegSite_t>& ret) 
//     {
//     ret.resize(0);

//     position_t lastPos = 0;
//     for (const auto& segsite : segsites) {
//         while (segsite.pos - lastPos > maxDistance) {
//             ret.push_back({lastPos + maxDistance, min(segsite.obs, 1)});
//             lastPos += maxDistance;
//         }
//         ret.push_back(segsite);
//         lastPos = segsite.pos;
//     }
// }


void read_flow_field_default(
    vector<float>& mean_grid_def,
    vector<float>& cv_grid_def,
    vector<float>& flow_field_unravelled
    ) {

    mean_grid_def.push_back(0.000010);
    mean_grid_def.push_back(100.000000);
    mean_grid_def.push_back(51);

    cv_grid_def.push_back(0.010000);
    cv_grid_def.push_back(1.000000);
    cv_grid_def.push_back(50);
    
    // TODO: Move to another file
    flow_field_unravelled = {-3.11004e-08, -3.41906e-08, -3.75909e-08, -4.13322e-08, -4.54501e-08, -4.99821e-08, -5.49716e-08, -6.04658e-08, -6.65156e-08, -7.31804e-08, -8.05235e-08, -8.86149e-08, -9.7534e-08, -1.07367e-07, -1.1821e-07, -1.3017e-07, -1.43364e-07, -1.57923e-07, -1.73991e-07, -1.91726e-07, -2.11302e-07, -2.32911e-07, -2.56759e-07, -2.83071e-07, -3.12087e-07, -3.44063e-07, -3.79259e-07, -4.17941e-07, -4.60365e-07, -5.06759e-07, -5.57114e-07, -6.1184e-07, -6.71028e-07, -7.3373e-07, -8.00166e-07, -8.68829e-07, -9.38026e-07, -1.00614e-06, -1.07003e-06, -1.12505e-06, -1.16573e-06, -1.18699e-06, -1.18022e-06, -1.13972e-06, -1.05889e-06, -9.35634e-07, -7.74745e-07, -5.91874e-07, -4.28384e-07, -5.94484e-07, -4.28776e-08, -4.71321e-08, -5.18114e-08, -5.69598e-08, -6.26238e-08, -6.88549e-08, -7.57129e-08, -8.326e-08, -9.15666e-08, -1.00712e-07, -1.1078e-07, -1.21867e-07, -1.34077e-07, -1.47525e-07, -1.62338e-07, -1.78657e-07, -1.96634e-07, -2.16439e-07, -2.38255e-07, -2.62285e-07, -2.88743e-07, -3.17865e-07, -3.49899e-07, -3.85107e-07, -4.23761e-07, -4.66131e-07, -5.12478e-07, -5.63042e-07, -6.18009e-07, -6.77484e-07, -7.41198e-07, -8.09381e-07, -8.8173e-07, -9.56485e-07, -1.03302e-06, -1.1095e-06, -1.18199e-06, -1.24779e-06, -1.30157e-06, -1.33721e-06, -1.34745e-06, -1.32428e-06, -1.25995e-06, -1.1463e-06, -9.80282e-07, -7.63414e-07, -5.06272e-07, -2.35213e-07, -1.58676e-08, -4.00156e-07, -5.90873e-08, -6.49393e-08, -7.13732e-08, -7.84477e-08, -8.62282e-08, -9.47835e-08, -1.04192e-07, -1.14541e-07, -1.25922e-07, -1.38442e-07, -1.52214e-07, -1.67362e-07, -1.84025e-07, -2.02353e-07, -2.22514e-07, -2.44683e-07, -2.69059e-07, -2.95853e-07, -3.25293e-07, -3.57626e-07, -3.93106e-07, -4.3201e-07, -4.74611e-07, -5.21189e-07, -5.72011e-07, -6.27319e-07, -6.87309e-07, -7.51748e-07, -8.21676e-07, -8.95607e-07, -9.73929e-07, -1.05566e-06, -1.13957e-06, -1.22415e-06, -1.30627e-06, -1.38223e-06, -1.44886e-06, -1.49898e-06, -1.52607e-06, -1.5215e-06, -1.47788e-06, -1.3842e-06, -1.23333e-06, -1.019e-06, -7.39906e-07, -4.03178e-07, -2.80296e-08, 3.47045e-07, 6.24395e-07, -1.17566e-07, -8.13725e-08, -8.94102e-08, -9.82407e-08, -1.0795e-07, -1.18614e-07, -1.30336e-07, -1.43219e-07, -1.57373e-07, -1.72925e-07, -1.90012e-07, -2.08783e-07, -2.29402e-07, -2.52047e-07, -2.7691e-07, -3.042e-07, -3.34141e-07, -3.66971e-07, -4.02954e-07, -4.42356e-07, -4.85451e-07, -5.32533e-07, -5.8361e-07, -6.39772e-07, -7.00444e-07, -7.66095e-07, -8.36846e-07, -9.12701e-07, -9.93034e-07, -1.07827e-06, -1.16766e-06, -1.25945e-06, -1.35224e-06, -1.44367e-06, -1.5305e-06, -1.60853e-06, -1.67238e-06, -1.71615e-06, -1.72989e-06, -1.70725e-06, -1.63686e-06, -1.50841e-06, -1.31415e-06, -1.04509e-06, -6.98078e-07, -2.73855e-07, 2.12417e-07, 7.31499e-07, 1.22923e-06, 1.56864e-06, 2.76869e-07, -1.11965e-07, -1.22983e-07, -1.35085e-07, -1.48371e-07, -1.62959e-07, -1.78973e-07, -1.96551e-07, -2.15845e-07, -2.37015e-07, -2.60236e-07, -2.85703e-07, -3.13624e-07, -3.4422e-07, -3.77727e-07, -4.14403e-07, -4.54519e-07, -4.98345e-07, -5.46185e-07, -5.9832e-07, -6.55043e-07, -7.16632e-07, -7.82955e-07, -8.55314e-07, -9.32718e-07, -1.01553e-06, -1.10361e-06, -1.19605e-06, -1.29306e-06, -1.39316e-06, -1.49521e-06, -1.59619e-06, -1.69346e-06, -1.78311e-06, -1.85965e-06, -1.91838e-06, -1.95038e-06, -1.94668e-06, -1.90005e-06, -1.79684e-06, -1.62809e-06, -1.38274e-06, -1.05151e-06, -6.28303e-07, -1.09709e-07, 4.96276e-07, 1.16924e-06, 1.86593e-06, 2.51402e-06, 2.92404e-06, 8.14788e-07, -1.53874e-07, -1.68272e-07, -1.8547e-07, -2.036e-07, -2.2348e-07, -2.45276e-07, -2.69165e-07, -2.95341e-07, -3.24007e-07, -3.55386e-07, -3.89718e-07, -4.27257e-07, -4.68268e-07, -5.13035e-07, -5.6185e-07, -6.15018e-07, -6.72821e-07, -7.3557e-07, -8.03516e-07, -8.76918e-07, -9.55953e-07, -1.04023e-06, -1.13121e-06, -1.22725e-06, -1.32845e-06, -1.43413e-06, -1.5426e-06, -1.65349e-06, -1.76416e-06, -1.87177e-06, -1.97334e-06, -2.06295e-06, -2.13441e-06, -2.18312e-06, -2.19897e-06, -2.17221e-06, -2.09492e-06, -1.95329e-06, -1.73575e-06, -1.43186e-06, -1.03098e-06, -5.21735e-07, 1.00049e-07, 8.35399e-07, 1.67178e-06, 2.58212e-06, 3.50391e-06, 4.34089e-06, 4.83763e-06, 1.54105e-06, -2.11119e-07, -2.30736e-07, -2.54142e-07, -2.78774e-07, -3.05741e-07, -3.35248e-07, -3.67529e-07, -4.02807e-07, -4.41352e-07, -4.83431e-07, -5.29314e-07, -5.79301e-07, -6.33698e-07, -6.92816e-07, -7.56942e-07, -8.26388e-07, -9.014e-07, -9.82227e-07, -1.06901e-06, -1.161e-06, -1.26075e-06, -1.3648e-06, -1.47555e-06, -1.59037e-06, -1.70774e-06, -1.82886e-06, -1.94955e-06, -2.06763e-06, -2.17964e-06, -2.28117e-06, -2.36595e-06, -2.42896e-06, -2.46297e-06, -2.45616e-06, -2.40158e-06, -2.28596e-06, -2.09686e-06, -1.82441e-06, -1.45348e-06, -9.71899e-07, -3.67751e-07, 3.68933e-07, 1.24424e-06, 2.25683e-06, 3.39155e-06, 4.60849e-06, 5.82333e-06, 6.90559e-06, 7.51429e-06, 2.51577e-06, -2.89009e-07, -3.156e-07, -3.47294e-07, -3.80568e-07, -4.16909e-07, -4.56577e-07, -4.99856e-07, -5.47002e-07, -5.98341e-07, -6.54165e-07, -7.14785e-07, -7.79482e-07, -8.5164e-07, -9.28479e-07, -1.01127e-06, -1.10025e-06, -1.19552e-06, -1.29719e-06, -1.40512e-06, -1.51798e-06, -1.63876e-06, -1.76244e-06, -1.89059e-06, -2.02104e-06, -2.15179e-06, -2.28018e-06, -2.40289e-06, -2.51695e-06, -2.61505e-06, -2.69118e-06, -2.73966e-06, -2.75138e-06, -2.71673e-06, -2.62499e-06, -2.46437e-06, -2.22207e-06, -1.88318e-06, -1.43717e-06, -8.65443e-07, -1.53519e-07, 7.10079e-07, 1.74086e-06, 2.94439e-06, 4.31926e-06, 5.84501e-06, 7.46653e-06, 9.07132e-06, 1.04791e-05, 1.12409e-05, 3.82162e-06, -3.94438e-07, -4.30239e-07, -4.72842e-07, -5.17436e-07, -5.65983e-07, -6.18808e-07, -6.76225e-07, -7.38507e-07, -8.06012e-07, -8.79049e-07, -9.57913e-07, -1.04149e-06, -1.13416e-06, -1.23099e-06, -1.33644e-06, -1.44617e-06, -1.56525e-06, -1.68919e-06, -1.8176e-06, -1.952e-06, -2.09199e-06, -2.23178e-06, -2.37278e-06, -2.51153e-06, -2.6448e-06, -2.76859e-06, -2.87806e-06, -2.96741e-06, -3.02984e-06, -3.05747e-06, -3.04006e-06, -2.96965e-06, -2.83548e-06, -2.62114e-06, -2.31713e-06, -1.90583e-06, -1.37076e-06, -6.97377e-07, 1.32812e-07, 1.14018e-06, 2.34245e-06, 3.75601e-06, 5.39214e-06, 7.24688e-06, 9.29502e-06, 1.14619e-05, 1.35907e-05, 1.54395e-05, 1.64154e-05, 5.57138e-06, -5.36092e-07, -5.8386e-07, -6.40618e-07, -6.99748e-07, -7.63861e-07, -8.33298e-07, -9.08406e-07, -9.89432e-07, -1.0767e-06, -1.17051e-06, -1.27103e-06, -1.37658e-06, -1.49273e-06, -1.61266e-06, -1.74192e-06, -1.87442e-06, -2.01416e-06, -2.16149e-06, -2.30879e-06, -2.45961e-06, -2.61062e-06, -2.76059e-06, -2.90238e-06, -3.03613e-06, -3.15808e-06, -3.2575e-06, -3.3322e-06, -3.37371e-06, -3.37357e-06, -3.3222e-06, -3.20888e-06, -3.02163e-06, -2.74709e-06, -2.37057e-06, -1.87571e-06, -1.24448e-06, -4.58503e-07, 5.08526e-07, 1.67591e-06, 3.07029e-06, 4.71704e-06, 6.63915e-06, 8.85143e-06, 1.13542e-05, 1.41093e-05, 1.70154e-05, 1.98595e-05, 2.23082e-05, 2.35876e-05, 7.91717e-06, -7.24641e-07, -7.87597e-07, -8.62241e-07, -9.39549e-07, -1.02292e-06, -1.11268e-06, -1.20911e-06, -1.31241e-06, -1.4228e-06, -1.53874e-06, -1.66517e-06, -1.79468e-06, -1.93574e-06, -2.07919e-06, -2.23173e-06, -2.38507e-06, -2.54392e-06, -2.70636e-06, -2.86729e-06, -3.02559e-06, -3.1782e-06, -3.32139e-06, -3.45076e-06, -3.56115e-06, -3.64655e-06, -3.70006e-06, -3.71383e-06, -3.67887e-06, -3.58511e-06, -3.42123e-06, -3.1729e-06, -2.82871e-06, -2.37316e-06, -1.78343e-06, -1.04402e-06, -1.28532e-07, 9.89593e-07, 2.33499e-06, 3.94562e-06, 5.85291e-06, 8.0933e-06, 1.06994e-05, 1.3693e-05, 1.70751e-05, 2.07949e-05, 2.47137e-05, 2.85379e-05, 3.18106e-05, 3.35226e-05, 1.10664e-05, -9.72314e-07, -1.05403e-06, -1.15057e-06, -1.24979e-06, -1.35602e-06, -1.46948e-06, -1.59039e-06, -1.71872e-06, -1.85445e-06, -1.99521e-06, -2.14714e-06, -2.30019e-06, -2.46494e-06, -2.62907e-06, -2.80071e-06, -2.96887e-06, -3.13893e-06, -3.3059e-06, -3.46925e-06, -3.62083e-06, -3.75527e-06, -3.87561e-06, -3.96992e-06, -4.03343e-06, -4.05872e-06, -4.03753e-06, -3.96038e-06, -3.81891e-06, -3.59433e-06, -3.28117e-06, -2.8589e-06, -2.31105e-06, -1.61727e-06, -7.53041e-07, 3.05064e-07, 1.59155e-06, 3.1423e-06, 4.99455e-06, 7.19371e-06, 9.79028e-06, 1.28345e-05, 1.6369e-05, 2.04302e-05, 2.50147e-05, 3.00584e-05, 3.537e-05, 4.05434e-05, 4.49512e-05, 4.72812e-05, 1.53026e-05, -1.29233e-06, -1.39606e-06, -1.51834e-06, -1.64263e-06, -1.77454e-06, -1.91398e-06, -2.06101e-06, -2.21521e-06, -2.37616e-06, -2.54053e-06, -2.71567e-06, -2.88839e-06, -3.07147e-06, -3.24917e-06, -3.42797e-06, -3.6031e-06, -3.77156e-06, -3.92996e-06, -4.07424e-06, -4.19982e-06, -4.30138e-06, -4.37297e-06, -4.40774e-06, -4.39802e-06, -4.335e-06, -4.20877e-06, -4.008e-06, -3.71974e-06, -3.32926e-06, -2.81927e-06, -2.17185e-06, -1.36055e-06, -3.57962e-07, 8.61919e-07, 2.34128e-06, 4.11889e-06, 6.24338e-06, 8.77384e-06, 1.17724e-05, 1.53053e-05, 1.94422e-05, 2.42508e-05, 2.97747e-05, 3.60153e-05, 4.28822e-05, 5.01122e-05, 5.71474e-05, 6.31228e-05, 6.63356e-05, 2.10146e-05, -1.69677e-06, -1.82507e-06, -1.97562e-06, -2.12672e-06, -2.28512e-06, -2.45061e-06, -2.61843e-06, -2.80053e-06, -2.9774e-06, -3.16604e-06, -3.35783e-06, -3.54187e-06, -3.73333e-06, -3.91271e-06, -4.0838e-06, -4.25163e-06, -4.40144e-06, -4.53242e-06, -4.63635e-06, -4.71386e-06, -4.75581e-06, -4.75758e-06, -4.70335e-06, -4.59155e-06, -4.4128e-06, -4.148e-06, -3.78406e-06, -3.30894e-06, -2.70148e-06, -1.93941e-06, -9.98343e-07, 1.56302e-07, 1.56153e-06, 3.25461e-06, 5.29049e-06, 7.72824e-06, 1.06315e-05, 1.40828e-05, 1.81678e-05, 2.29828e-05, 2.86221e-05, 3.51798e-05, 4.27197e-05, 5.12422e-05, 6.06254e-05, 7.05072e-05, 8.0115e-05, 8.82614e-05, 9.27352e-05, 2.87414e-05, -2.19408e-06, -2.34741e-06, -2.5211e-06, -2.70349e-06, -2.88616e-06, -3.07413e-06, -3.26116e-06, -3.46158e-06, -3.65092e-06, -3.84972e-06, -4.04225e-06, -4.22956e-06, -4.40862e-06, -4.57649e-06, -4.72945e-06, -4.86336e-06, -4.97377e-06, -5.05545e-06, -5.10278e-06, -5.10881e-06, -5.06625e-06, -4.96946e-06, -4.79996e-06, -4.55489e-06, -4.22216e-06, -3.77659e-06, -3.20776e-06, -2.49203e-06, -1.60408e-06, -5.13766e-07, 8.12541e-07, 2.42314e-06, 4.36232e-06, 6.69143e-06, 9.48032e-06, 1.28106e-05, 1.67753e-05, 2.14881e-05, 2.70643e-05, 3.36397e-05, 4.13496e-05, 5.03205e-05, 6.0643e-05, 7.23195e-05, 8.51821e-05, 9.87315e-05, 0.000111902, 0.000123057, 0.000129332, 3.92383e-05, -2.78508e-06, -2.96061e-06, -3.15839e-06, -3.36318e-06, -3.56391e-06, -3.76663e-06, -3.96345e-06, -4.16416e-06, -4.36102e-06, -4.55682e-06, -4.73323e-06, -4.90921e-06, -5.06451e-06, -5.19583e-06, -5.31266e-06, -5.39155e-06, -5.44156e-06, -5.45224e-06, -5.42059e-06, -5.3308e-06, -5.1776e-06, -4.94723e-06, -4.63617e-06, -4.22095e-06, -3.6873e-06, -3.01453e-06, -2.1757e-06, -1.14691e-06, 1.09032e-07, 1.63133e-06, 3.47267e-06, 5.6901e-06, 8.35285e-06, 1.15446e-05, 1.53583e-05, 1.99114e-05, 2.53361e-05, 3.17778e-05, 3.94115e-05, 4.84175e-05, 5.89849e-05, 7.1293e-05, 8.54635e-05, 0.000101506, 0.000119186, 0.000137817, 0.000155931, 0.000171268, 0.000180118, 5.35775e-05, -3.45899e-06, -3.65056e-06, -3.86468e-06, -4.08295e-06, -4.29082e-06, -4.49035e-06, -4.6905e-06, -4.88334e-06, -5.0664e-06, -5.23684e-06, -5.39118e-06, -5.53397e-06, -5.638e-06, -5.7271e-06, -5.77367e-06, -5.7934e-06, -5.76342e-06, -5.67349e-06, -5.5349e-06, -5.32216e-06, -5.02785e-06, -4.63462e-06, -4.13563e-06, -3.50215e-06, -2.71376e-06, -1.74279e-06, -5.56087e-07, 8.89447e-07, 2.63542e-06, 4.73971e-06, 7.27406e-06, 1.03179e-05, 1.39672e-05, 1.83364e-05, 2.35602e-05, 2.97958e-05, 3.72249e-05, 4.60617e-05, 5.65345e-05, 6.89026e-05, 8.34291e-05, 0.000100355, 0.000119861, 0.000141954, 0.000166318, 0.000192003, 0.000216986, 0.000238152, 0.000250695, 7.33115e-05, -4.1924e-06, -4.38895e-06, -4.60801e-06, -4.82722e-06, -5.02895e-06, -5.21601e-06, -5.39872e-06, -5.56781e-06, -5.72094e-06, -5.84766e-06, -5.9647e-06, -6.03967e-06, -6.10008e-06, -6.10999e-06, -6.08242e-06, -6.00572e-06, -5.87147e-06, -5.67107e-06, -5.39392e-06, -5.0259e-06, -4.55207e-06, -3.95769e-06, -3.20963e-06, -2.29198e-06, -1.1697e-06, 1.95626e-07, 1.84711e-06, 3.84514e-06, 6.253e-06, 9.15155e-06, 1.26311e-05, 1.68059e-05, 2.18077e-05, 2.78008e-05, 3.49673e-05, 4.35291e-05, 5.37349e-05, 6.58804e-05, 8.02906e-05, 9.73197e-05, 0.000117334, 0.000140674, 0.000167583, 0.000198085, 0.000231739, 0.00026724, 0.000301797, 0.000331117, 0.000348967, 0.000100731, -4.94901e-06, -5.13587e-06, -5.34724e-06, -5.55184e-06, -5.71806e-06, -5.88383e-06, -6.04245e-06, -6.16137e-06, -6.28014e-06, -6.35408e-06, -6.39582e-06, -6.41819e-06, -6.38277e-06, -6.31441e-06, -6.19356e-06, -5.99763e-06, -5.73419e-06, -5.3857e-06, -4.94276e-06, -4.37772e-06, -3.66797e-06, -2.80288e-06, -1.74116e-06, -4.48582e-07, 1.11853e-06, 3.01382e-06, 5.29967e-06, 8.05275e-06, 1.13645e-05, 1.53441e-05, 2.01248e-05, 2.58587e-05, 3.27303e-05, 4.09671e-05, 5.08235e-05, 6.26027e-05, 7.66634e-05, 9.34045e-05, 0.000113281, 0.000136787, 0.000164433, 0.000196693, 0.000233912, 0.000276121, 0.000322725, 0.000371925, 0.000419875, 0.000460651, 0.000486169, 0.000139299, -5.68642e-06, -5.84925e-06, -6.0383e-06, -6.18419e-06, -6.34276e-06, -6.46708e-06, -6.55801e-06, -6.64512e-06, -6.67831e-06, -6.69734e-06, -6.67968e-06, -6.60085e-06, -6.48836e-06, -6.30278e-06, -6.04566e-06, -5.72151e-06, -5.29731e-06, -4.76153e-06, -4.08938e-06, -3.26711e-06, -2.26082e-06, -1.03855e-06, 4.50645e-07, 2.24922e-06, 4.4149e-06, 7.03332e-06, 1.01829e-05, 1.39722e-05, 1.85278e-05, 2.40014e-05, 3.05733e-05, 3.84645e-05, 4.79334e-05, 5.92806e-05, 7.28724e-05, 8.9133e-05, 0.000108548, 0.000131686, 0.000159178, 0.000191713, 0.000230001, 0.000274708, 0.000326319, 0.000384892, 0.000449608, 0.000517998, 0.000584761, 0.000641728, 0.000678404, 0.000194394, -6.3355e-06, -6.48814e-06, -6.64048e-06, -6.74027e-06, -6.83601e-06, -6.91641e-06, -6.95905e-06, -6.96854e-06, -6.94161e-06, -6.86314e-06, -6.75376e-06, -6.56972e-06, -6.34117e-06, -6.01939e-06, -5.61513e-06, -5.10587e-06, -4.47162e-06, -3.69019e-06, -2.73642e-06, -1.57295e-06, -1.62357e-07, 1.541e-06, 3.60637e-06, 6.09283e-06, 9.08846e-06, 1.26945e-05, 1.70321e-05, 2.22521e-05, 2.85284e-05, 3.60755e-05, 4.51421e-05, 5.60314e-05, 6.91049e-05, 8.47881e-05, 0.000103587, 0.000126091, 0.000152986, 0.000185061, 0.000223198, 0.00026836, 0.000321548, 0.000383693, 0.000455482, 0.000537012, 0.000627172, 0.000722575, 0.000815922, 0.000895955, 0.000949027, 0.000274593, -6.90616e-06, -7.01733e-06, -7.08815e-06, -7.17021e-06, -7.20559e-06, -7.21053e-06, -7.16952e-06, -7.11288e-06, -6.98307e-06, -6.82191e-06, -6.60165e-06, -6.29057e-06, -5.90254e-06, -5.41698e-06, -4.81289e-06, -4.06986e-06, -3.1621e-06, -2.05641e-06, -7.1512e-07, 9.02145e-07, 2.86787e-06, 5.22984e-06, 8.08422e-06, 1.15136e-05, 1.56485e-05, 2.06244e-05, 2.66176e-05, 3.38249e-05, 4.24958e-05, 5.29236e-05, 6.54641e-05, 8.05387e-05, 9.86499e-05, 0.000120397, 0.00014648, 0.000177731, 0.000215111, 0.000259724, 0.00031281, 0.000375721, 0.000449864, 0.000536554, 0.000636771, 0.000750684, 0.000876798, 0.00101047, 0.00114168, 0.00125489, 0.00133233, 0.000393895, -7.32249e-06, -7.41267e-06, -7.42554e-06, -7.40709e-06, -7.39214e-06, -7.32231e-06, -7.2093e-06, -7.04387e-06, -6.82086e-06, -6.52234e-06, -6.16113e-06, -5.68529e-06, -5.12044e-06, -4.40517e-06, -3.54576e-06, -2.4876e-06, -1.20667e-06, 3.36283e-07, 2.19833e-06, 4.44999e-06, 7.16535e-06, 1.04418e-05, 1.43797e-05, 1.91262e-05, 2.48503e-05, 3.17323e-05, 4.00208e-05, 5.00039e-05, 6.20197e-05, 7.64833e-05, 9.38881e-05, 0.000114829, 0.000140014, 0.000170273, 0.000206605, 0.000250172, 0.000302329, 0.000364629, 0.000438824, 0.000526823, 0.000630611, 0.000752062, 0.000892596, 0.00105251, 0.0012298, 0.00141814, 0.00160374, 0.00176522, 0.00187933, 0.00057558, -7.62299e-06, -7.58844e-06, -7.56496e-06, -7.51549e-06, -7.39906e-06, -7.23527e-06, -7.00664e-06, -6.73945e-06, -6.36852e-06, -5.92921e-06, -5.37791e-06, -4.70155e-06, -3.87305e-06, -2.86765e-06, -1.6481e-06, -1.72727e-07, 1.60631e-06, 3.75482e-06, 6.34653e-06, 9.47074e-06, 1.32344e-05, 1.77688e-05, 2.32333e-05, 2.98116e-05, 3.77423e-05, 4.72971e-05, 5.88091e-05, 7.26818e-05, 8.93977e-05, 0.000109534, 0.00013379, 0.000163003, 0.000198165, 0.000240463, 0.000291296, 0.000352312, 0.000425426, 0.000512842, 0.000617045, 0.00074075, 0.000886792, 0.00105787, 0.00125604, 0.00148183, 0.00173261, 0.00199974, 0.00226431, 0.00249684, 0.00266684, 0.000858855, -7.73788e-06, -7.65812e-06, -7.54672e-06, -7.38538e-06, -7.17702e-06, -6.90506e-06, -6.56124e-06, -6.12766e-06, -5.59444e-06, -4.95588e-06, -4.15191e-06, -3.19621e-06, -2.02102e-06, -6.12652e-07, 1.09024e-06, 3.14164e-06, 5.62359e-06, 8.61005e-06, 1.22095e-05, 1.65482e-05, 2.17739e-05, 2.8069e-05, 3.56677e-05, 4.48241e-05, 5.58642e-05, 6.91732e-05, 8.52267e-05, 0.000104592, 0.000127947, 0.000156114, 0.000190083, 0.000231035, 0.000280383, 0.000339809, 0.000411305, 0.000497217, 0.00060028, 0.000723641, 0.000870861, 0.00104583, 0.00125264, 0.0014952, 0.00177653, 0.00209756, 0.00245485, 0.00283667, 0.00321708, 0.00355549, 0.00381174, 0.00131005, -7.67582e-06, -7.48271e-06, -7.31257e-06, -7.04416e-06, -6.70533e-06, -6.28845e-06, -5.77795e-06, -5.15106e-06, -4.38509e-06, -3.45513e-06, -2.34912e-06, -9.80399e-07, 6.41633e-07, 2.61906e-06, 4.99005e-06, 7.85485e-06, 1.13106e-05, 1.5467e-05, 2.04751e-05, 2.65166e-05, 3.38099e-05, 4.25974e-05, 5.31939e-05, 6.59878e-05, 8.14244e-05, 0.00010006, 0.000122556, 0.000149728, 0.000182533, 0.000222149, 0.000269983, 0.000327713, 0.000397366, 0.000481355, 0.000582535, 0.000704275, 0.000850521, 0.00102581, 0.00123527, 0.00148456, 0.00177959, 0.00212607, 0.0025285, 0.00298851, 0.00350163, 0.00405201, 0.00460408, 0.00510197, 0.0054924, 0.00204076, -7.37873e-06, -7.17178e-06, -6.8191e-06, -6.3896e-06, -5.91085e-06, -5.30408e-06, -4.55312e-06, -3.67071e-06, -2.57768e-06, -1.28212e-06, 2.77893e-07, 2.17956e-06, 4.4744e-06, 7.21543e-06, 1.05346e-05, 1.45272e-05, 1.9348e-05, 2.51578e-05, 3.21695e-05, 4.06278e-05, 5.08245e-05, 6.31349e-05, 7.8011e-05, 9.59724e-05, 0.000117671, 0.000143904, 0.000175616, 0.000213955, 0.00026031, 0.000316358, 0.000384122, 0.000466028, 0.000564998, 0.000684511, 0.000828714, 0.0010025, 0.00121158, 0.00146256, 0.00176293, 0.0021209, 0.00254515, 0.00304404, 0.00362435, 0.00428881, 0.00503174, 0.00583168, 0.00663994, 0.00737954, 0.00797928, 0.00323536, -6.86211e-06, -6.50337e-06, -6.00794e-06, -5.37488e-06, -4.67966e-06, -3.8129e-06, -2.77088e-06, -1.51357e-06, 1.13024e-08, 1.82224e-06, 4.0365e-06, 6.68344e-06, 9.89796e-06, 1.37477e-05, 1.83999e-05, 2.39924e-05, 3.07582e-05, 3.89135e-05, 4.87474e-05, 6.06456e-05, 7.49902e-05, 9.23391e-05, 0.000113316, 0.000138683, 0.000169372, 0.000206511, 0.000251475, 0.000305897, 0.000371803, 0.000451608, 0.00054825, 0.000665251, 0.000806873, 0.000978184, 0.00118524, 0.00143519, 0.0017364, 0.00209855, 0.0025326, 0.00305061, 0.00366533, 0.00438911, 0.00523209, 0.00619872, 0.00728181, 0.00845221, 0.00964323, 0.0107487, 0.0116725, 0.00518776, -6.06466e-06, -5.4061e-06, -4.76266e-06, -3.88821e-06, -2.89728e-06, -1.67238e-06, -1.79206e-07, 1.59164e-06, 3.74071e-06, 6.28683e-06, 9.39474e-06, 1.31174e-05, 1.76113e-05, 2.30246e-05, 2.95597e-05, 3.74626e-05, 4.6968e-05, 5.84666e-05, 7.2363e-05, 8.91642e-05, 0.000109471, 0.00013405, 0.0001638, 0.000199825, 0.000243459, 0.000296338, 0.000360441, 0.000438156, 0.000532422, 0.000646769, 0.000785469, 0.0009537, 0.00115767, 0.00140485, 0.00170411, 0.00206597, 0.00250272, 0.0030286, 0.00365972, 0.00441382, 0.00530959, 0.00636518, 0.00759557, 0.00900769, 0.0105921, 0.0123089, 0.0140664, 0.015718, 0.0171328, 0.00833845, -4.80076e-06, -3.87866e-06, -2.94964e-06, -1.71566e-06, -2.92071e-07, 1.44128e-06, 3.51668e-06, 6.01664e-06, 9.01635e-06, 1.26163e-05, 1.70006e-05, 2.22554e-05, 2.85828e-05, 3.62329e-05, 4.54688e-05, 5.66117e-05, 7.01e-05, 8.63741e-05, 0.000106077, 0.000129928, 0.000158786, 0.000193753, 0.000236132, 0.000287487, 0.000349807, 0.00042543, 0.000517231, 0.000628734, 0.000764171, 0.00092874, 0.0011287, 0.0013716, 0.00166661, 0.00202464, 0.00245876, 0.00298441, 0.00361966, 0.00438537, 0.00530512, 0.00640478, 0.00771147, 0.00925143, 0.011046, 0.0131051, 0.0154154, 0.017921, 0.0204954, 0.0229362, 0.0250642, 0.0132799, -2.91344e-06, -1.68836e-06, -3.00919e-07, 1.30629e-06, 3.40403e-06, 5.80717e-06, 8.74749e-06, 1.22537e-05, 1.65182e-05, 2.16198e-05, 2.77869e-05, 3.52229e-05, 4.41732e-05, 5.49931e-05, 6.80659e-05, 8.39188e-05, 0.000103012, 0.000126151, 0.000154144, 0.000188048, 0.000229148, 0.000278984, 0.00033944, 0.000412846, 0.000501951, 0.000610237, 0.000741883, 0.000901966, 0.00109664, 0.00133351, 0.00162168, 0.00197216, 0.00239824, 0.00291593, 0.00354421, 0.00430553, 0.0052261, 0.0063361, 0.00766937, 0.00926285, 0.0111548, 0.0133816, 0.0159722, 0.0189381, 0.0222582, 0.0258525, 0.0295452, 0.033059, 0.0361495, 0.0206534, -2.59365e-07, 1.38503e-06, 3.34574e-06, 5.74248e-06, 8.58492e-06, 1.196e-05, 1.61246e-05, 2.10816e-05, 2.71012e-05, 3.43085e-05, 4.30217e-05, 5.35242e-05, 6.62162e-05, 8.15058e-05, 0.000100028, 0.000122443, 0.000149538, 0.000182264, 0.000222009, 0.000270137, 0.000328476, 0.000399288, 0.000485236, 0.000589694, 0.000716545, 0.000870831, 0.0010585, 0.0012868, 0.00156462, 0.00190275, 0.00231427, 0.00281491, 0.00342366, 0.00416327, 0.00506078, 0.00614785, 0.00746149, 0.00904373, 0.0109415, 0.0132051, 0.0158858, 0.0190304, 0.0226738, 0.026825, 0.0314461, 0.03642, 0.0415039, 0.0463254, 0.0505612, 0.0307946, 3.30004e-06, 5.77997e-06, 8.42184e-06, 1.17981e-05, 1.5836e-05, 2.05855e-05, 2.63918e-05, 3.33697e-05, 4.18017e-05, 5.19111e-05, 6.41574e-05, 7.89652e-05, 9.67482e-05, 0.000118265, 0.000144265, 0.000175761, 0.000213806, 0.000259882, 0.000315684, 0.000383284, 0.000465229, 0.000564664, 0.000685332, 0.000831855, 0.00100976, 0.00122596, 0.00148873, 0.00180818, 0.00219644, 0.00266857, 0.00324239, 0.00393957, 0.00478597, 0.00581252, 0.00705562, 0.00855782, 0.0103681, 0.0125416, 0.0151386, 0.0182227, 0.0218556, 0.0260908, 0.0309616, 0.0364632, 0.0425269, 0.0489808, 0.0554992, 0.0616076, 0.0669114, 0.0429376, 8.40624e-06, 1.15428e-05, 1.53605e-05, 1.99407e-05, 2.56499e-05, 3.22087e-05, 4.02603e-05, 4.99184e-05, 6.17054e-05, 7.56508e-05, 9.26031e-05, 0.000113091, 0.000137869, 0.000167482, 0.000203479, 0.000246978, 0.000299393, 0.000362784, 0.000439573, 0.000532361, 0.000644635, 0.000780586, 0.000945262, 0.00114465, 0.00138609, 0.00167872, 0.00203329, 0.00246284, 0.0029831, 0.00361326, 0.00437614, 0.00529887, 0.00641399, 0.00775976, 0.00938074, 0.0113283, 0.0136607, 0.0164422, 0.0197409, 0.0236254, 0.0281584, 0.0333865, 0.0393255, 0.0459389, 0.0531087, 0.0605961, 0.067997, 0.0747704, 0.0805176, 0.0538618, 1.47945e-05, 1.90219e-05, 2.42377e-05, 3.05631e-05, 3.83025e-05, 4.71715e-05, 5.81757e-05, 7.13968e-05, 8.72357e-05, 0.000106147, 0.000129097, 0.000156681, 0.000189952, 0.000229762, 0.000277911, 0.000335934, 0.00040573, 0.00048978, 0.000591093, 0.000713266, 0.000860177, 0.00103719, 0.00125044, 0.00150707, 0.00181579, 0.00218732, 0.00263412, 0.00317098, 0.00381566, 0.00458954, 0.00551721, 0.00662787, 0.00795559, 0.00953981, 0.0114253, 0.0136623, 0.016306, 0.0194148, 0.0230473, 0.0272569, 0.0320848, 0.0375471, 0.0436193, 0.0502148, 0.0571594, 0.0641638, 0.070805, 0.0766023, 0.0813325, 0.0561829, 2.2782e-05, 2.8448e-05, 3.52162e-05, 4.35541e-05, 5.36942e-05, 6.53871e-05, 7.97408e-05, 9.70235e-05, 0.000117822, 0.000142289, 0.00017197, 0.000207716, 0.000250294, 0.000301106, 0.000362328, 0.000435674, 0.000523186, 0.000627788, 0.000752928, 0.000902316, 0.00108018, 0.00129213, 0.00154438, 0.00184399, 0.00219905, 0.00261964, 0.00311672, 0.00370306, 0.00439273, 0.00520242, 0.00615023, 0.00725617, 0.00854215, 0.0100321, 0.0117504, 0.0137222, 0.0159717, 0.0185198, 0.0213811, 0.0245594, 0.0280404, 0.0317823, 0.0357037, 0.0396703, 0.0434839, 0.0468834, 0.0495793, 0.0514106, 0.0526617, 0.0369867, 3.15831e-05, 3.90331e-05, 4.75727e-05, 5.79628e-05, 7.05763e-05, 8.53837e-05, 0.000103285, 0.000124687, 0.000150102, 0.000180314, 0.000216533, 0.000259601, 0.000310661, 0.000370872, 0.000442688, 0.000527718, 0.000627575, 0.000745123, 0.000883547, 0.00104543, 0.00123392, 0.00145308, 0.00170668, 0.00199845, 0.00233154, 0.00271016, 0.00313665, 0.00361238, 0.00413667, 0.00470723, 0.00531743, 0.00595607, 0.00660622, 0.00724407, 0.00783647, 0.00834037, 0.00870196, 0.00885521, 0.00872155, 0.00821042, 0.00721892, 0.00563176, 0.00332219, 0.000155062, -0.00399902, -0.0092193, -0.0154176, -0.0220578, -0.0278637, -0.0223095, 4.10239e-05, 4.9775e-05, 5.99867e-05, 7.23631e-05, 8.71713e-05, 0.000104624, 0.000125448, 0.000150344, 0.000179747, 0.000213342, 0.000253887, 0.000301396, 0.000356592, 0.000420159, 0.000494706, 0.000580395, 0.000678607, 0.000789465, 0.000915072, 0.00105486, 0.00120811, 0.0013735, 0.00154817, 0.00172665, 0.00189943, 0.00205535, 0.00217621, 0.00223682, 0.00220268, 0.00202937, 0.00165701, 0.00100886, -1.11996e-05, -0.00152194, -0.00366755, -0.0066175, -0.0105649, -0.0157238, -0.0223208, -0.0305829, -0.0407235, -0.0529241, -0.0673138, -0.0839448, -0.10275, -0.123449, -0.145318, -0.166716, -0.184771, -0.144691, 4.94856e-05, 5.97708e-05, 7.06518e-05, 8.5088e-05, 0.000101817, 0.000120172, 0.000142594, 0.000168944, 0.000199252, 0.00023336, 0.000272978, 0.000318322, 0.00036924, 0.000424974, 0.000486919, 0.000553089, 0.000622574, 0.000692091, 0.000758771, 0.000816095, 0.000854886, 0.00086413, 0.000826419, 0.000718684, 0.000508538, 0.00015585, -0.000394831, -0.00121573, -0.00239933, -0.0040623, -0.00635267, -0.00945408, -0.013589, -0.0190246, -0.0260745, -0.0350965, -0.0464867, -0.0606679, -0.0780677, -0.0990903, -0.12408, -0.153282, -0.186797, -0.224539, -0.266173, -0.310965, -0.357414, -0.402447, -0.440881, -0.356074, 5.71397e-05, 6.90055e-05, 7.98391e-05, 9.47085e-05, 0.000111261, 0.000129572, 0.000151167, 0.00017536, 0.000202379, 0.000230171, 0.000261378, 0.000293725, 0.000325962, 0.00035429, 0.000378455, 0.000392841, 0.000390443, 0.000362454, 0.000297367, 0.000178363, -1.81891e-05, -0.000320848, -0.000769582, -0.00141612, -0.00232953, -0.0035941, -0.00532162, -0.00765348, -0.0107657, -0.014877, -0.020257, -0.0272327, -0.0361949, -0.0476033, -0.0619893, -0.0799506, -0.102141, -0.129249, -0.161965, -0.200932, -0.246689, -0.299604, -0.359814, -0.427163, -0.501121, -0.580596, -0.663383, -0.744834, -0.81663, -0.685548, 6.37352e-05, 7.5216e-05, 8.559e-05, 9.83701e-05, 0.000113832, 0.000127636, 0.000143931, 0.000160497, 0.000175942, 0.000187238, 0.000196064, 0.000196717, 0.000185856, 0.000155483, 0.000100625, 9.15458e-06, -0.000134484, -0.000349694, -0.000660823, -0.00110323, -0.0017211, -0.00256991, -0.00372375, -0.00527584, -0.00734589, -0.0100804, -0.0136658, -0.018333, -0.0243646, -0.032104, -0.0419671, -0.0544504, -0.070138, -0.0897108, -0.113949, -0.143729, -0.180009, -0.22381, -0.276169, -0.338081, -0.41042, -0.493849, -0.588732, -0.695064, -0.812383, -0.939555, -1.07402, -1.20971, -1.33431, -1.16845, 6.63205e-05, 7.51658e-05, 8.28874e-05, 9.14817e-05, 9.92975e-05, 0.000103623, 0.000107292, 0.000103948, 9.43872e-05, 7.05705e-05, 3.12952e-05, -3.15775e-05, -0.000127327, -0.000271809, -0.000476388, -0.000763923, -0.00116401, -0.00171251, -0.00245383, -0.00344947, -0.00477546, -0.00652558, -0.00882039, -0.0118087, -0.0156776, -0.0206522, -0.0270122, -0.0350958, -0.0453104, -0.0581436, -0.0741762, -0.0940919, -0.11869, -0.148896, -0.185772, -0.230513, -0.284447, -0.34901, -0.425708, -0.516044, -0.621429, -0.743061, -0.881812, -1.03815, -1.21207, -1.40292, -1.60844, -1.8217, -2.02581, -1.85195, 5.96342e-05, 6.38105e-05, 6.19934e-05, 5.95535e-05, 5.38872e-05, 3.56965e-05, 9.96868e-06, -3.11724e-05, -9.32639e-05, -0.000186982, -0.000317653, -0.000501164, -0.000754188, -0.0011042, -0.00157385, -0.00220489, -0.00304426, -0.00415352, -0.00560663, -0.00750056, -0.00995539, -0.0131145, -0.0171598, -0.0223118, -0.0288395, -0.0370635, -0.0473748, -0.0602389, -0.0762087, -0.09594, -0.120206, -0.149913, -0.186118, -0.230046, -0.283103, -0.346891, -0.423206, -0.514028, -0.621476, -0.747743, -0.89498, -1.06516, -1.25993, -1.48055, -1.72789, -2.00237, -2.30303, -2.62318, -2.9412, -2.80237, 3.03926e-05, 2.58452e-05, 5.71254e-06, -1.93799e-05, -5.76854e-05, -0.000117822, -0.000201195, -0.000314401, -0.000473894, -0.000695749, -0.000990716, -0.00138681, -0.00191453, -0.00261509, -0.00353029, -0.00472604, -0.00627609, -0.00827557, -0.010838, -0.0141079, -0.018259, -0.0234996, -0.0300851, -0.0383228, -0.0485817, -0.0612983, -0.0769969, -0.0962998, -0.119941, -0.148792, -0.183876, -0.226393, -0.277749, -0.339575, -0.413756, -0.502447, -0.608078, -0.733351, -0.881194, -1.05468, -1.25692, -1.49084, -1.75909, -2.06393, -2.40741, -2.79162, -3.21801, -3.68177, -4.15701, -4.11377, -3.09633e-05, -6.52909e-05, -0.000121011, -0.000191532, -0.000289669, -0.000428569, -0.000612996, -0.00086059, -0.00118952, -0.00163114, -0.00220524, -0.00295698, -0.00393159, -0.00519644, -0.0068154, -0.00888514, -0.0115197, -0.0148504, -0.0190444, -0.0243028, -0.0308665, -0.0390214, -0.0491151, -0.0615604, -0.0768508, -0.0955713, -0.118421, -0.146228, -0.179976, -0.22083, -0.270163, -0.329596, -0.401025, -0.48666, -0.589058, -0.711147, -0.856238, -1.02801, -1.23048, -1.46786, -1.74446, -2.06441, -2.43152, -2.84917, -3.32074, -3.85037, -4.44297, -5.09758, -5.78511, -5.9186, -0.000173268, -0.000256141, -0.000370105, -0.0005263, -0.000730029, -0.00100735, -0.00137009, -0.00183732, -0.0024498, -0.00324796, -0.00426897, -0.00557615, -0.00724223, -0.00936019, -0.0120265, -0.0153773, -0.0195676, -0.0247862, -0.0312585, -0.0392558, -0.0491038, -0.0611891, -0.0759739, -0.0940147, -0.115969, -0.142628, -0.174931, -0.213998, -0.261162, -0.318006, -0.386401, -0.468557, -0.567064, -0.684945, -0.825694, -0.993314, -1.19233, -1.42777, -1.70511, -2.03013, -2.40869, -2.84648, -3.34866, -3.91989, -4.56486, -5.28988, -6.10412, -7.01249, -7.984, -8.40171, -0.000440852, -0.000607665, -0.000840554, -0.00113213, -0.00151146, -0.00202001, -0.00266262, -0.00348765, -0.00453981, -0.00588352, -0.00757796, -0.0097076, -0.0123779, -0.0157174, -0.019862, -0.0249924, -0.0313238, -0.0391072, -0.0486472, -0.0603087, -0.0745302, -0.0918315, -0.112836, -0.138298, -0.169111, -0.20635, -0.251297, -0.305484, -0.370737, -0.449224, -0.543514, -0.656637, -0.792147, -0.95419, -1.14756, -1.37774, -1.65094, -1.97404, -2.35453, -2.80031, -3.31939, -3.91949, -4.60758, -5.38975, -6.272, -7.26266, -8.37567, -9.62358, -10.9747, -11.8194, -0.000930198, -0.00123889, -0.00165564, -0.00216793, -0.00283235, -0.00368677, -0.00476127, -0.00611677, -0.00781581, -0.00994853, -0.0125981, -0.0158885, -0.0199511, -0.0249619, -0.0311102, -0.0386378, -0.0478298, -0.0590299, -0.0726492, -0.0891821, -0.109218, -0.133471, -0.162795, -0.198215, -0.24096, -0.292505, -0.354612, -0.429387, -0.519338, -0.627449, -0.757249, -0.912905, -1.0993, -1.32214, -1.58799, -1.90441, -2.2799, -2.72391, -3.24672, -3.85915, -4.57216, -5.39625, -6.34083, -7.41383, -8.6226, -9.97733, -11.4968, -13.2028, -15.0637, -16.526, -0.00175771, -0.0022918, -0.00297999, -0.00383918, -0.00492166, -0.0062856, -0.00797782, -0.0100831, -0.0126924, -0.0159135, -0.0198717, -0.0247244, -0.0306631, -0.0379055, -0.0467241, -0.0574386, -0.0704429, -0.0861984, -0.105269, -0.128329, -0.156192, -0.189835, -0.230433, -0.279396, -0.338418, -0.409526, -0.495148, -0.598183, -0.722085, -0.870958, -1.04966, -1.26393, -1.52048, -1.82715, -2.19301, -2.62841, -3.14506, -3.75596, -4.47521, -5.31768, -6.29839, -7.43172, -8.7304, -10.2049, -11.8641, -13.72, -15.7963, -18.125, -20.6742, -23.0099, -0.00309041, -0.00394592, -0.00503941, -0.00638689, -0.00805838, -0.0101288, -0.0126754, -0.0158048, -0.0196348, -0.0243171, -0.0300216, -0.0369612, -0.0453939, -0.0556176, -0.0680015, -0.0829899, -0.101113, -0.123012, -0.14946, -0.181387, -0.219913, -0.266383, -0.322417, -0.389958, -0.47134, -0.569356, -0.68735, -0.829316, -1.00001, -1.20509, -1.45124, -1.74636, -2.09971, -2.52208, -3.02594, -3.62557, -4.33708, -5.17835, -6.16878, -7.32882, -8.67909, -10.2393, -12.0269, -14.0558, -16.337, -18.8843, -21.7263, -24.9066, -28.3918, -31.9442, -0.00509811, -0.00642903, -0.00807451, -0.0100843, -0.0125551, -0.0155785, -0.01927, -0.0237643, -0.0292228, -0.0358585, -0.0438939, -0.0536276, -0.0654049, -0.0796441, -0.0968489, -0.117627, -0.142718, -0.173, -0.20954, -0.25362, -0.306783, -0.370887, -0.448161, -0.541287, -0.653477, -0.788585, -0.951219, -1.14688, -1.38213, -1.66475, -2.00399, -2.41069, -2.89765, -3.47971, -4.17408, -5.00041, -5.9809, -7.14018, -8.50497, -10.1034, -11.9639, -14.1134, -16.576, -19.3703, -22.5105, -26.0124, -29.9101, -34.2603, -39.0256, -44.2555, 1.08999e-07, 1.09993e-07, 1.11112e-07, 1.12343e-07, 1.13727e-07, 1.15253e-07, 1.16959e-07, 1.18869e-07, 1.20987e-07, 1.23372e-07, 1.26045e-07, 1.29038e-07, 1.32409e-07, 1.36202e-07, 1.40476e-07, 1.4532e-07, 1.50801e-07, 1.57022e-07, 1.641e-07, 1.72173e-07, 1.81396e-07, 1.91963e-07, 2.0409e-07, 2.18041e-07, 2.3412e-07, 2.52692e-07, 2.74172e-07, 2.99052e-07, 3.27891e-07, 3.61337e-07, 4.01622e-07, 4.46656e-07, 4.96801e-07, 5.57422e-07, 6.2455e-07, 7.01815e-07, 7.89736e-07, 8.85331e-07, 9.87657e-07, 1.09544e-06, 1.20416e-06, 1.30413e-06, 1.38865e-06, 1.44283e-06, 1.45319e-06, 1.40388e-06, 1.2817e-06, 1.08512e-06, 8.07511e-07, 1.89316e-07, 1.59987e-07, 1.62338e-07, 1.64931e-07, 1.6784e-07, 1.71065e-07, 1.74624e-07, 1.78611e-07, 1.83036e-07, 1.87957e-07, 1.93462e-07, 1.99598e-07, 2.06476e-07, 2.14179e-07, 2.22815e-07, 2.32527e-07, 2.43457e-07, 2.55787e-07, 2.6971e-07, 2.8547e-07, 3.03349e-07, 3.23652e-07, 3.46762e-07, 3.73108e-07, 4.03203e-07, 4.37632e-07, 4.77067e-07, 5.22279e-07, 5.74161e-07, 6.33698e-07, 7.01975e-07, 7.82199e-07, 8.7175e-07, 9.71204e-07, 1.08763e-06, 1.217e-06, 1.35914e-06, 1.51813e-06, 1.68718e-06, 1.86399e-06, 2.04221e-06, 2.21248e-06, 2.36193e-06, 2.4736e-06, 2.52956e-06, 2.50678e-06, 2.38495e-06, 2.14985e-06, 1.80493e-06, 1.34446e-06, 3.14462e-07, 2.38955e-07, 2.44053e-07, 2.49683e-07, 2.55923e-07, 2.6287e-07, 2.70552e-07, 2.79071e-07, 2.88563e-07, 2.99108e-07, 3.10861e-07, 3.23959e-07, 3.38576e-07, 3.54915e-07, 3.73192e-07, 3.93694e-07, 4.16676e-07, 4.42523e-07, 4.71599e-07, 5.04374e-07, 5.41391e-07, 5.83225e-07, 6.30607e-07, 6.84312e-07, 7.45276e-07, 8.14539e-07, 8.93278e-07, 9.82829e-07, 1.08869e-06, 1.20031e-06, 1.33393e-06, 1.48255e-06, 1.64999e-06, 1.83757e-06, 2.0444e-06, 2.27381e-06, 2.52498e-06, 2.78874e-06, 3.06565e-06, 3.34504e-06, 3.61577e-06, 3.8575e-06, 4.05377e-06, 4.17732e-06, 4.20144e-06, 4.09829e-06, 3.84288e-06, 3.42096e-06, 2.84603e-06, 2.11585e-06, 4.81166e-07, 3.64206e-07, 3.74723e-07, 3.86283e-07, 3.99238e-07, 4.1343e-07, 4.29228e-07, 4.46776e-07, 4.6621e-07, 4.87786e-07, 5.11789e-07, 5.38471e-07, 5.68213e-07, 6.01383e-07, 6.38411e-07, 6.79776e-07, 7.26061e-07, 7.77877e-07, 8.36027e-07, 9.01322e-07, 9.7468e-07, 1.05724e-06, 1.15631e-06, 1.25501e-06, 1.37317e-06, 1.50644e-06, 1.65674e-06, 1.82613e-06, 2.02218e-06, 2.23687e-06, 2.47407e-06, 2.74187e-06, 3.0388e-06, 3.36555e-06, 3.72154e-06, 4.10444e-06, 4.50947e-06, 4.92602e-06, 5.35032e-06, 5.75663e-06, 6.12935e-06, 6.44257e-06, 6.66217e-06, 6.7575e-06, 6.69218e-06, 6.43478e-06, 5.95549e-06, 5.24269e-06, 4.32455e-06, 3.20746e-06, 7.01823e-07, 5.67895e-07, 5.88931e-07, 6.12256e-07, 6.37988e-07, 6.66456e-07, 6.97926e-07, 7.32809e-07, 7.71489e-07, 8.14366e-07, 8.61904e-07, 9.14724e-07, 9.73452e-07, 1.03876e-06, 1.11143e-06, 1.19243e-06, 1.28277e-06, 1.38355e-06, 1.49617e-06, 1.62201e-06, 1.76277e-06, 1.92029e-06, 2.10478e-06, 2.29394e-06, 2.5148e-06, 2.76181e-06, 3.03776e-06, 3.35195e-06, 3.69487e-06, 4.07497e-06, 4.49024e-06, 4.94991e-06, 5.45021e-06, 5.98935e-06, 6.56591e-06, 7.1642e-06, 7.78117e-06, 8.40129e-06, 8.99379e-06, 9.5434e-06, 1.00117e-05, 1.03637e-05, 1.05593e-05, 1.05557e-05, 1.03134e-05, 9.79184e-06, 8.96223e-06, 7.81538e-06, 6.40083e-06, 4.73857e-06, 9.93003e-07, 9.07123e-07, 1.05784e-06, 9.94136e-07, 1.04457e-06, 1.10022e-06, 1.16179e-06, 1.22981e-06, 1.30514e-06, 1.38844e-06, 1.48065e-06, 1.58283e-06, 1.69611e-06, 1.82169e-06, 1.96106e-06, 2.11581e-06, 2.28775e-06, 2.47871e-06, 2.69104e-06, 2.927e-06, 3.18941e-06, 3.48105e-06, 3.81599e-06, 4.16481e-06, 4.56374e-06, 5.00535e-06, 5.49315e-06, 6.03866e-06, 6.62852e-06, 7.27221e-06, 7.97023e-06, 8.71546e-06, 9.51495e-06, 1.03626e-05, 1.12313e-05, 1.21177e-05, 1.3001e-05, 1.3843e-05, 1.46219e-05, 1.52975e-05, 1.58228e-05, 1.6151e-05, 1.62376e-05, 1.60291e-05, 1.54792e-05, 1.45426e-05, 1.31904e-05, 1.14152e-05, 9.29495e-06, 6.87359e-06, 1.37714e-06, 1.48444e-06, 1.71455e-06, 1.65272e-06, 1.74993e-06, 1.85714e-06, 1.97535e-06, 2.10591e-06, 2.24985e-06, 2.4089e-06, 2.58456e-06, 2.77843e-06, 2.99262e-06, 3.22932e-06, 3.491e-06, 3.78011e-06, 4.09973e-06, 4.45285e-06, 4.84301e-06, 5.27372e-06, 5.77336e-06, 6.2732e-06, 6.86452e-06, 7.48422e-06, 8.17953e-06, 8.95821e-06, 9.77811e-06, 1.06774e-05, 1.16475e-05, 1.2687e-05, 1.37917e-05, 1.49612e-05, 1.61701e-05, 1.74009e-05, 1.86505e-05, 1.98717e-05, 2.10424e-05, 2.21232e-05, 2.30577e-05, 2.38048e-05, 2.43085e-05, 2.45128e-05, 2.43603e-05, 2.37934e-05, 2.27568e-05, 2.1201e-05, 1.90909e-05, 1.64233e-05, 1.33123e-05, 9.84044e-06, 1.88409e-06, 2.48539e-06, 2.8436e-06, 2.80647e-06, 2.99149e-06, 3.19496e-06, 3.41888e-06, 3.6655e-06, 3.93658e-06, 4.23513e-06, 4.56359e-06, 4.92495e-06, 5.38592e-06, 5.75945e-06, 6.24006e-06, 6.76814e-06, 7.3482e-06, 7.98466e-06, 8.68252e-06, 9.44645e-06, 1.03136e-05, 1.11934e-05, 1.22043e-05, 1.32831e-05, 1.44502e-05, 1.57075e-05, 1.70555e-05, 1.84921e-05, 1.99981e-05, 2.15927e-05, 2.32575e-05, 2.49592e-05, 2.66819e-05, 2.83961e-05, 3.00663e-05, 3.16508e-05, 3.31021e-05, 3.43728e-05, 3.53918e-05, 3.61132e-05, 3.64718e-05, 3.63958e-05, 3.58265e-05, 3.46922e-05, 3.29281e-05, 3.04741e-05, 2.72865e-05, 2.33671e-05, 1.88748e-05, 1.39555e-05, 2.55386e-06, 4.2465e-06, 4.81476e-06, 4.85104e-06, 5.19859e-06, 5.57944e-06, 5.99744e-06, 6.45615e-06, 6.95845e-06, 7.50911e-06, 8.11241e-06, 8.77279e-06, 9.57996e-06, 1.02845e-05, 1.11972e-05, 1.20874e-05, 1.3172e-05, 1.42272e-05, 1.5438e-05, 1.67876e-05, 1.82087e-05, 1.9696e-05, 2.13613e-05, 2.31191e-05, 2.4991e-05, 2.69736e-05, 2.90601e-05, 3.12401e-05, 3.34986e-05, 3.58153e-05, 3.81642e-05, 4.05234e-05, 4.28357e-05, 4.50563e-05, 4.71611e-05, 4.90699e-05, 5.0739e-05, 5.21055e-05, 5.30927e-05, 5.36343e-05, 5.3663e-05, 5.3101e-05, 5.18694e-05, 4.98871e-05, 4.70683e-05, 4.33387e-05, 3.86406e-05, 3.2975e-05, 2.65667e-05, 1.96567e-05, 3.43985e-06, 7.37417e-06, 8.29176e-06, 8.49976e-06, 9.1431e-06, 9.84567e-06, 1.06133e-05, 1.14518e-05, 1.23657e-05, 1.33619e-05, 1.4447e-05, 1.56271e-05, 1.7021e-05, 1.82988e-05, 1.98707e-05, 2.14319e-05, 2.32652e-05, 2.51607e-05, 2.7105e-05, 2.93233e-05, 3.16406e-05, 3.41018e-05, 3.66743e-05, 3.94414e-05, 4.23042e-05, 4.52434e-05, 4.83278e-05, 5.14634e-05, 5.46387e-05, 5.78181e-05, 6.09603e-05, 6.40184e-05, 6.69401e-05, 6.96682e-05, 7.21413e-05, 7.42944e-05, 7.6059e-05, 7.73579e-05, 7.81329e-05, 7.82881e-05, 7.77449e-05, 7.64125e-05, 7.41929e-05, 7.09799e-05, 6.66672e-05, 6.11475e-05, 5.4343e-05, 4.62555e-05, 3.71936e-05, 2.75485e-05, 4.61319e-06, 1.29607e-05, 1.44605e-05, 1.50233e-05, 1.61951e-05, 1.74685e-05, 1.88523e-05, 2.03543e-05, 2.19817e-05, 2.37435e-05, 2.57727e-05, 2.7701e-05, 3.00588e-05, 3.22867e-05, 3.49184e-05, 3.75542e-05, 4.05537e-05, 4.36426e-05, 4.68549e-05, 5.02979e-05, 5.39121e-05, 5.76871e-05, 6.16087e-05, 6.5658e-05, 6.98109e-05, 7.40381e-05, 7.83049e-05, 8.25709e-05, 8.67903e-05, 9.09122e-05, 9.4881e-05, 9.86493e-05, 0.000102129, 0.000105252, 0.000107981, 0.000110212, 0.000111888, 0.000112927, 0.000113226, 0.000112713, 0.000111272, 0.000108792, 0.000105145, 0.00010019, 9.37792e-05, 8.57661e-05, 7.60399e-05, 6.45995e-05, 5.18698e-05, 3.8468e-05, 6.1688e-06, 2.29342e-05, 2.54063e-05, 2.66516e-05, 2.87446e-05, 3.10043e-05, 3.34426e-05, 3.60695e-05, 3.88927e-05, 4.19234e-05, 4.53286e-05, 4.8629e-05, 5.25056e-05, 5.62326e-05, 6.0487e-05, 6.47512e-05, 6.94701e-05, 7.42883e-05, 7.93077e-05, 8.44396e-05, 8.98053e-05, 9.53909e-05, 0.000100962, 0.000106643, 0.000112353, 0.000118042, 0.000123662, 0.000129155, 0.000134435, 0.000139519, 0.000144249, 0.00014861, 0.000152517, 0.0001559, 0.000158688, 0.000160782, 0.000162117, 0.000162599, 0.000162114, 0.000160548, 0.000157777, 0.000153646, 0.000147975, 0.000140579, 0.000131246, 0.000119774, 0.000106004, 8.99292e-05, 7.2133e-05, 5.35721e-05, 8.23341e-06, 4.06642e-05, 4.47292e-05, 4.72145e-05, 5.0862e-05, 5.47706e-05, 5.89498e-05, 6.34098e-05, 6.81572e-05, 7.31966e-05, 7.87368e-05, 8.41544e-05, 9.03059e-05, 9.62617e-05, 0.000102861, 0.000109584, 0.000116539, 0.000123698, 0.000131031, 0.0001385, 0.000146064, 0.000153677, 0.000161286, 0.000168839, 0.000176275, 0.000183533, 0.00019055, 0.000197259, 0.000203592, 0.000209482, 0.000214859, 0.000219636, 0.000223769, 0.000227181, 0.000229754, 0.000231433, 0.000232098, 0.000231638, 0.000229934, 0.000226831, 0.000222145, 0.000215671, 0.000207173, 0.000196377, 0.000182992, 0.000166733, 0.000147374, 0.000124897, 0.000100106, 7.44593e-05, 1.09763e-05, 7.18616e-05, 7.84913e-05, 8.30981e-05, 8.92749e-05, 9.58211e-05, 0.00010275, 0.000110487, 0.000117749, 0.000126296, 0.000134481, 0.000142971, 0.000152331, 0.000161387, 0.000171153, 0.000181146, 0.000190963, 0.000201065, 0.000211229, 0.000221496, 0.000231604, 0.000241587, 0.00025132, 0.000260907, 0.000270107, 0.00027885, 0.000287186, 0.000295018, 0.000302218, 0.000308747, 0.000314536, 0.000319496, 0.000323581, 0.000326707, 0.000328743, 0.000329612, 0.000329189, 0.000327309, 0.000323816, 0.0003185, 0.000311116, 0.000301369, 0.000288932, 0.000273423, 0.000254431, 0.000231555, 0.000204478, 0.000173163, 0.00013872, 0.000103339, 1.46238e-05, 0.000125935, 0.000136553, 0.000145416, 0.000154682, 0.000165247, 0.00017629, 0.000188318, 0.000199711, 0.000212631, 0.000225014, 0.000238005, 0.000251248, 0.000264687, 0.000278252, 0.00029188, 0.000305498, 0.000319032, 0.000332404, 0.000345543, 0.000358369, 0.000370809, 0.000382729, 0.000394245, 0.000405102, 0.000415229, 0.000424726, 0.0004334, 0.000441219, 0.000448117, 0.000454026, 0.000458853, 0.000462561, 0.000465004, 0.000466084, 0.000465665, 0.000463581, 0.00045963, 0.000453591, 0.000445156, 0.000433995, 0.000419701, 0.000401804, 0.000379774, 0.000353034, 0.000321021, 0.000283288, 0.000239779, 0.000192016, 0.000143265, 1.94793e-05, 0.000217817, 0.000234348, 0.000248646, 0.000263413, 0.000279739, 0.00029656, 0.000314459, 0.000332123, 0.000350079, 0.000367873, 0.000386558, 0.000404497, 0.000422791, 0.000441173, 0.000458886, 0.000476735, 0.000493958, 0.000510685, 0.000526719, 0.000542233, 0.000557031, 0.000571118, 0.000584228, 0.000596504, 0.000607826, 0.000618137, 0.000627415, 0.000635534, 0.000642465, 0.000648115, 0.000652434, 0.000655303, 0.000656596, 0.00065617, 0.000653818, 0.000649338, 0.000642454, 0.000632813, 0.000620035, 0.000603629, 0.000583028, 0.000557581, 0.000526537, 0.000489099, 0.000444476, 0.000392041, 0.000331709, 0.000265575, 0.000198454, 2.59498e-05, 0.000370165, 0.000395028, 0.000416951, 0.00043929, 0.000463326, 0.000488454, 0.000513101, 0.000537878, 0.000562672, 0.000587355, 0.00061181, 0.000635462, 0.000659604, 0.000682469, 0.000705179, 0.000726639, 0.000747518, 0.000767777, 0.00078665, 0.000804632, 0.000821528, 0.000837362, 0.000851879, 0.000865248, 0.000877358, 0.000888163, 0.000897615, 0.000905689, 0.000912245, 0.000917214, 0.000920524, 0.000922022, 0.000921538, 0.000918868, 0.000913751, 0.000905873, 0.000894842, 0.000880208, 0.000861384, 0.000837711, 0.000808394, 0.000772507, 0.000729023, 0.000676819, 0.000614799, 0.000542086, 0.000458557, 0.000367093, 0.000274736, 3.45829e-05, 0.000615934, 0.000651741, 0.000683634, 0.000715671, 0.0007493, 0.0007837, 0.000817093, 0.000850097, 0.000882604, 0.000914943, 0.000945517, 0.000976207, 0.00100483, 0.00103317, 0.00106004, 0.00108566, 0.00110995, 0.00113288, 0.0011544, 0.00117448, 0.00119309, 0.00121014, 0.00122582, 0.00123989, 0.00125239, 0.00126328, 0.00127247, 0.00127998, 0.00128567, 0.00128945, 0.00129113, 0.00129055, 0.00128745, 0.00128158, 0.00127255, 0.00125992, 0.00124313, 0.00122154, 0.00119435, 0.00116063, 0.00111926, 0.00106897, 0.00100831, 0.000935741, 0.00084973, 0.000749062, 0.000633557, 0.000507184, 0.000380167, 4.61176e-05, 0.00100107, 0.00105026, 0.00109425, 0.0011377, 0.00118427, 0.00122817, 0.00127015, 0.00131303, 0.00135252, 0.00139225, 0.0014305, 0.00146602, 0.001501, 0.00153339, 0.00156399, 0.00159336, 0.00162062, 0.00164602, 0.00166943, 0.00169115, 0.00171118, 0.00172914, 0.00174533, 0.00175965, 0.00177209, 0.0017826, 0.00179111, 0.00179753, 0.00180174, 0.00180358, 0.00180285, 0.00179925, 0.00179245, 0.00178207, 0.00176756, 0.00174828, 0.00172351, 0.0016923, 0.00165354, 0.00160593, 0.00154793, 0.00147775, 0.00139341, 0.00129276, 0.00117368, 0.00103449, 0.000874936, 0.000700481, 0.000525875, 6.15545e-05, 0.00158763, 0.00165197, 0.00170953, 0.00176963, 0.00182399, 0.00187864, 0.00193244, 0.00198195, 0.00203158, 0.00207719, 0.00212043, 0.00216252, 0.00220101, 0.00223801, 0.00227265, 0.00230432, 0.00233396, 0.00236131, 0.00238656, 0.00240941, 0.00243007, 0.00244845, 0.00246481, 0.00247891, 0.00249069, 0.00250029, 0.00250746, 0.00251211, 0.00251406, 0.00251306, 0.00250879, 0.00250092, 0.00248894, 0.00247223, 0.00245009, 0.00242165, 0.00238579, 0.00234127, 0.00228652, 0.00221973, 0.00213877, 0.00204117, 0.00192418, 0.00178482, 0.00162019, 0.00142796, 0.00120777, 0.000967138, 0.000727235, 8.22555e-05, 0.00246208, 0.00253829, 0.00260983, 0.00268301, 0.0027511, 0.00281499, 0.00287698, 0.00293579, 0.0029914, 0.00304447, 0.00309312, 0.00313987, 0.00318227, 0.00322265, 0.00325974, 0.00329395, 0.00332539, 0.00335409, 0.00338015, 0.00340362, 0.00342453, 0.00344282, 0.00345875, 0.00347203, 0.00348269, 0.00349062, 0.00349565, 0.00349763, 0.00349627, 0.00349123, 0.00348204, 0.00346815, 0.00344889, 0.0034234, 0.00339069, 0.0033495, 0.00329833, 0.0032354, 0.00315857, 0.00306532, 0.00295268, 0.00281727, 0.00265528, 0.00246262, 0.00223528, 0.00197007, 0.00166649, 0.0013349, 0.00100549, 0.000110086, 0.00372534, 0.00381684, 0.00390661, 0.00398746, 0.00406626, 0.00414081, 0.00421229, 0.00427697, 0.00434014, 0.00439717, 0.00445027, 0.00450084, 0.00454703, 0.00458961, 0.00462876, 0.00466458, 0.00469717, 0.00472667, 0.00475312, 0.00477647, 0.00479724, 0.00481486, 0.00482971, 0.00484142, 0.00485011, 0.00485554, 0.0048575, 0.00485564, 0.00484957, 0.00483876, 0.00482263, 0.00480036, 0.00477098, 0.00473333, 0.00468595, 0.00462713, 0.00455478, 0.00446643, 0.0043591, 0.00422932, 0.004073, 0.00388547, 0.00366149, 0.00339547, 0.0030819, 0.00271642, 0.00229834, 0.00184191, 0.00138999, 0.000147617, 0.00553057, 0.00563116, 0.00573361, 0.00583022, 0.00591588, 0.00599859, 0.00607582, 0.00614771, 0.00621456, 0.00627717, 0.00633381, 0.00638726, 0.00643509, 0.00647984, 0.00652005, 0.00655709, 0.0065903, 0.00661992, 0.00664605, 0.006669, 0.00668862, 0.00670504, 0.00671789, 0.0067273, 0.0067331, 0.00673482, 0.00673224, 0.0067249, 0.00671219, 0.00669337, 0.00666754, 0.0066336, 0.00659019, 0.00653563, 0.00646794, 0.00638472, 0.00628308, 0.00615958, 0.00601013, 0.00582993, 0.00561336, 0.00535402, 0.00504474, 0.00467787, 0.0042459, 0.00374287, 0.00316787, 0.00254045, 0.0019212, 0.000198418, 0.00806221, 0.00818562, 0.00829325, 0.00839383, 0.00848985, 0.00857917, 0.00866327, 0.00873853, 0.00881076, 0.00887513, 0.00893498, 0.00898979, 0.00903984, 0.00908533, 0.00912653, 0.00916359, 0.00919665, 0.00922585, 0.00925128, 0.00927296, 0.00929085, 0.00930491, 0.00931501, 0.0093209, 0.0093223, 0.00931879, 0.00930985, 0.00929478, 0.00927276, 0.00924273, 0.0092034, 0.00915323, 0.0090903, 0.00901232, 0.00891648, 0.00879945, 0.00865725, 0.00848513, 0.00827745, 0.00802763, 0.00772801, 0.00736981, 0.00694327, 0.00643797, 0.00584371, 0.0051524, 0.00436288, 0.00350193, 0.00265474, 0.000267477, 0.0115915, 0.0117199, 0.0118389, 0.0119491, 0.0120515, 0.0121458, 0.0122329, 0.0123131, 0.0123865, 0.0124532, 0.0125155, 0.0125709, 0.0126223, 0.0126679, 0.0127091, 0.0127457, 0.012778, 0.012806, 0.0128297, 0.0128492, 0.0128644, 0.012875, 0.012881, 0.0128818, 0.012877, 0.012866, 0.0128481, 0.0128222, 0.0127871, 0.0127414, 0.0126833, 0.0126106, 0.0125205, 0.01241, 0.012275, 0.0121111, 0.0119126, 0.0116731, 0.011385, 0.0110391, 0.010625, 0.0101308, 0.00954321, 0.00884817, 0.00803192, 0.0070836, 0.00600177, 0.00482307, 0.00366666, 0.000361787, 0.0164664, 0.0166079, 0.0167276, 0.016844, 0.0169505, 0.0170487, 0.0171387, 0.017221, 0.0172964, 0.0173657, 0.0174272, 0.0174846, 0.0175347, 0.0175806, 0.0176207, 0.0176564, 0.0176871, 0.0177129, 0.0177338, 0.01775, 0.0177612, 0.0177668, 0.0177667, 0.0177602, 0.0177467, 0.0177252, 0.0176946, 0.0176536, 0.0176003, 0.0175328, 0.0174484, 0.0173441, 0.0172161, 0.0170601, 0.0168706, 0.0166414, 0.0163649, 0.0160321, 0.0156325, 0.0151539, 0.014582, 0.0139008, 0.0130923, 0.0121376, 0.0110185, 0.00972051, 0.00824207, 0.00663323, 0.00505962, 0.000491133, 0.0231635, 0.0232986, 0.0234324, 0.0235551, 0.0236619, 0.0237622, 0.0238558, 0.0239381, 0.0240154, 0.0240839, 0.0241453, 0.0242022, 0.0242523, 0.024296, 0.0243352, 0.0243681, 0.024396, 0.0244185, 0.0244357, 0.0244469, 0.024452, 0.0244504, 0.0244418, 0.024425, 0.0243991, 0.0243628, 0.0243145, 0.0242521, 0.0241732, 0.0240749, 0.0239536, 0.023805, 0.0236239, 0.0234042, 0.0231386, 0.0228184, 0.0224331, 0.0219706, 0.0214166, 0.0207543, 0.0199646, 0.0190259, 0.0179144, 0.016605, 0.0150738, 0.0133022, 0.0112887, 0.0091014, 0.00696918, 0.000669006, 0.0323023, 0.0324415, 0.0325782, 0.0327034, 0.0328139, 0.0329149, 0.0330069, 0.0330909, 0.0331672, 0.0332348, 0.0332968, 0.0333509, 0.0333997, 0.0334414, 0.0334776, 0.0335071, 0.033531, 0.0335484, 0.0335594, 0.0335635, 0.0335601, 0.0335483, 0.0335274, 0.033496, 0.0334526, 0.0333953, 0.0333217, 0.033229, 0.0331138, 0.0329719, 0.0327983, 0.0325872, 0.0323314, 0.0320223, 0.0316499, 0.0312021, 0.0306646, 0.0300209, 0.0292515, 0.028334, 0.0272428, 0.0259491, 0.0244218, 0.0226284, 0.0205381, 0.0181279, 0.0153972, 0.012439, 0.00956651, 0.000913322, 0.0446989, 0.0448515, 0.0449844, 0.0451098, 0.045219, 0.0453205, 0.0454144, 0.0454975, 0.045572, 0.045638, 0.0456978, 0.0457496, 0.0457946, 0.0458331, 0.0458642, 0.0458894, 0.0459065, 0.0459166, 0.0459193, 0.0459129, 0.0458971, 0.0458708, 0.0458325, 0.04578, 0.0457114, 0.0456239, 0.045514, 0.045378, 0.0452109, 0.045007, 0.0447593, 0.0444595, 0.0440975, 0.0436617, 0.0431378, 0.0425095, 0.0417571, 0.0408581, 0.0397864, 0.0385118, 0.0370006, 0.0352154, 0.033116, 0.0306616, 0.0278142, 0.0245471, 0.0208632, 0.016889, 0.0130492, 0.001246, 0.0614105, 0.0615628, 0.0616955, 0.0618214, 0.0619306, 0.0620305, 0.0621209, 0.0622017, 0.0622729, 0.0623362, 0.0623928, 0.0624409, 0.062481, 0.0625137, 0.0625386, 0.0625558, 0.0625647, 0.062564, 0.0625539, 0.0625326, 0.0624991, 0.0624514, 0.0623875, 0.0623044, 0.0621993, 0.0620682, 0.0619062, 0.0617079, 0.0614663, 0.0611732, 0.0608188, 0.0603914, 0.0598768, 0.0592587, 0.0585174, 0.0576301, 0.0565703, 0.0553072, 0.0538056, 0.0520257, 0.0499238, 0.0474519, 0.0445602, 0.0411995, 0.0373266, 0.0329142, 0.0279746, 0.0226809, 0.0176014, 0.00168923, 0.0837363, 0.0838901, 0.0840175, 0.084135, 0.0842446, 0.0843408, 0.0844281, 0.0845051, 0.0845727, 0.0846328, 0.0846822, 0.0847253, 0.0847573, 0.0847824, 0.0847978, 0.0848044, 0.0847997, 0.0847839, 0.0847547, 0.0847112, 0.0846515, 0.0845724, 0.084471, 0.0843436, 0.0841854, 0.0839908, 0.0837529, 0.0834639, 0.0831135, 0.0826901, 0.0821796, 0.0815653, 0.0808273, 0.0799423, 0.0788832, 0.077618, 0.0761102, 0.0743181, 0.0721945, 0.0696876, 0.066741, 0.0632958, 0.0592931, 0.0546787, 0.0494103, 0.0434695, 0.0368914, 0.0299153, 0.0232901, 0.00225422, 0.113244, 0.113383, 0.113513, 0.11363, 0.113733, 0.113825, 0.113905, 0.113978, 0.114041, 0.114092, 0.114135, 0.114167, 0.11419, 0.114204, 0.114205, 0.114194, 0.11417, 0.11413, 0.114074, 0.113998, 0.113899, 0.113774, 0.113618, 0.113425, 0.113189, 0.112901, 0.11255, 0.112126, 0.111614, 0.110996, 0.110253, 0.10936, 0.108288, 0.107004, 0.10547, 0.103641, 0.101466, 0.0988877, 0.0958438, 0.0922664, 0.0880854, 0.0832317, 0.0776418, 0.0712661, 0.0640789, 0.0560938, 0.0473963, 0.0383257, 0.0298478, 0.00291652, 0.151754, 0.151899, 0.152016, 0.152128, 0.152228, 0.15231, 0.152384, 0.152448, 0.152501, 0.152542, 0.152574, 0.152592, 0.152599, 0.152594, 0.152574, 0.152538, 0.152485, 0.152411, 0.152314, 0.15219, 0.152035, 0.151841, 0.151604, 0.151313, 0.150959, 0.15053, 0.15001, 0.149382, 0.148625, 0.147712, 0.146614, 0.145296, 0.143715, 0.141824, 0.139565, 0.136876, 0.133685, 0.129912, 0.125474, 0.120283, 0.114254, 0.107314, 0.0994048, 0.0905048, 0.080639, 0.0699, 0.0584815, 0.0468801, 0.0363088, 0.003573, 0.201376, 0.201491, 0.201614, 0.20171, 0.201803, 0.201877, 0.201937, 0.20199, 0.202031, 0.202057, 0.20207, 0.202067, 0.202055, 0.20202, 0.201969, 0.201897, 0.201801, 0.201676, 0.201519, 0.201324, 0.201083, 0.200787, 0.200426, 0.199987, 0.199455, 0.19881, 0.198031, 0.197091, 0.195956, 0.19459, 0.192948, 0.190975, 0.188609, 0.185779, 0.182402, 0.178385, 0.173625, 0.168011, 0.161429, 0.153768, 0.144929, 0.134843, 0.123485, 0.110902, 0.0972367, 0.0827497, 0.0678507, 0.0532938, 0.0405548, 0.00398497, 0.264493, 0.264597, 0.264709, 0.264801, 0.264874, 0.264932, 0.264984, 0.265014, 0.265034, 0.265039, 0.265026, 0.264994, 0.264946, 0.264874, 0.264777, 0.264653, 0.264493, 0.264291, 0.264044, 0.263741, 0.26337, 0.262918, 0.26237, 0.261704, 0.260899, 0.259925, 0.258749, 0.25733, 0.255618, 0.253557, 0.251078, 0.248101, 0.244532, 0.240263, 0.235171, 0.229119, 0.221957, 0.213528, 0.203675, 0.192256, 0.17916, 0.164341, 0.147846, 0.129861, 0.110755, 0.091105, 0.0717219, 0.0537856, 0.0390389, 0.00373212, 0.344227, 0.34431, 0.344406, 0.344483, 0.344532, 0.34457, 0.344596, 0.344607, 0.344599, 0.344568, 0.344519, 0.344446, 0.344348, 0.344219, 0.344055, 0.343847, 0.343595, 0.343279, 0.342895, 0.342425, 0.341859, 0.341168, 0.340333, 0.339324, 0.338104, 0.336632, 0.334856, 0.332716, 0.330138, 0.327038, 0.323312, 0.318843, 0.313489, 0.307094, 0.299475, 0.290431, 0.279745, 0.267193, 0.252555, 0.235643, 0.216334, 0.194615, 0.170651, 0.144855, 0.117962, 0.0910821, 0.0657079, 0.0437279, 0.027196, 0.00222148, 0.445201, 0.445304, 0.445352, 0.445386, 0.445437, 0.445435, 0.445427, 0.445401, 0.445346, 0.445277, 0.445173, 0.445038, 0.444867, 0.444648, 0.44438, 0.44405, 0.44365, 0.443154, 0.44256, 0.441841, 0.440972, 0.439919, 0.438654, 0.43713, 0.435295, 0.433087, 0.430434, 0.427251, 0.423429, 0.418849, 0.413368, 0.406817, 0.398999, 0.389691, 0.378637, 0.365553, 0.350131, 0.332051, 0.310998, 0.286702, 0.258987, 0.227852, 0.193573, 0.156837, 0.118877, 0.0815848, 0.0475263, 0.0197797, 0.000960297, -0.00121644, 0.575149, 0.575183, 0.57524, 0.575248, 0.575242, 0.575215, 0.575156, 0.575086, 0.574959, 0.574817, 0.574627, 0.574393, 0.574108, 0.573751, 0.573319, 0.572792, 0.572167, 0.571391, 0.570469, 0.56936, 0.568032, 0.566433, 0.564523, 0.562241, 0.559512, 0.556253, 0.552368, 0.547745, 0.54224, 0.535702, 0.527943, 0.518749, 0.507869, 0.495015, 0.479855, 0.462013, 0.441068, 0.416567, 0.388036, 0.355029, 0.317195, 0.274389, 0.226849, 0.175425, 0.121855, 0.0690234, 0.0210809, -0.0168828, -0.0409077, -0.00717329, 0.746635, 0.746619, 0.746603, 0.746553, 0.74653, 0.746419, 0.746299, 0.746139, 0.745917, 0.745653, 0.745322, 0.744925, 0.744444, 0.743863, 0.743155, 0.742313, 0.741314, 0.740097, 0.738657, 0.736938, 0.734901, 0.732479, 0.729608, 0.726213, 0.722205, 0.71748, 0.711922, 0.705397, 0.697744, 0.688793, 0.678336, 0.666137, 0.651918, 0.635358, 0.616075, 0.59361, 0.567423, 0.536872, 0.50122, 0.459657, 0.411378, 0.355731, 0.292488, 0.222246, 0.146973, 0.0705965, -0.000554245, -0.0580814, -0.0949514, -0.0160485, 0.978261, 0.978262, 0.978198, 0.978094, 0.977935, 0.977737, 0.9775, 0.97716, 0.976807, 0.976324, 0.975771, 0.975099, 0.974298, 0.973322, 0.972169, 0.970804, 0.969191, 0.967256, 0.964991, 0.962323, 0.95919, 0.955514, 0.951222, 0.946222, 0.940406, 0.933674, 0.925899, 0.916949, 0.906675, 0.894917, 0.881494, 0.866195, 0.848772, 0.828925, 0.806267, 0.780296, 0.750351, 0.715554, 0.674767, 0.626569, 0.569294, 0.501204, 0.420861, 0.327788, 0.223454, 0.112501, 0.00389953, -0.0889304, -0.15293, -0.0280684, 1.29601, 1.29582, 1.29566, 1.29542, 1.29512, 1.29472, 1.29427, 1.29373, 1.29304, 1.29223, 1.29129, 1.29015, 1.28879, 1.2872, 1.28531, 1.28309, 1.28051, 1.27746, 1.27393, 1.2698, 1.26504, 1.25955, 1.25323, 1.246, 1.23777, 1.22842, 1.21787, 1.20601, 1.19273, 1.17793, 1.16148, 1.14324, 1.12304, 1.10063, 1.07565, 1.0476, 1.01568, 0.978774, 0.935261, 0.882923, 0.81889, 0.739742, 0.641938, 0.52274, 0.381812, 0.223467, 0.0591899, -0.0908716, -0.203538, -0.0434438, 1.73374, 1.73345, 1.73306, 1.73263, 1.732, 1.73138, 1.73057, 1.72959, 1.72845, 1.72708, 1.72544, 1.72357, 1.72135, 1.71874, 1.7157, 1.7122, 1.70815, 1.70343, 1.69806, 1.6919, 1.68492, 1.67699, 1.66808, 1.65809, 1.64696, 1.63462, 1.62103, 1.60613, 1.58988, 1.57222, 1.55309, 1.53241, 1.51002, 1.48571, 1.45909, 1.42959, 1.3963, 1.35785, 1.31218, 1.25633, 1.18617, 1.09632, 0.980435, 0.832252, 0.647816, 0.429122, 0.188892, -0.0450202, -0.23456, -0.0625875, 2.33762, 2.33695, 2.33638, 2.33549, 2.33456, 2.33339, 2.33195, 2.33031, 2.32836, 2.3261, 2.32347, 2.32038, 2.31686, 2.31276, 2.30805, 2.30268, 2.29661, 2.28968, 2.28191, 2.27321, 2.26353, 2.25281, 2.24104, 2.22817, 2.21417, 2.19907, 2.18284, 2.16548, 2.14697, 2.12728, 2.10632, 2.08397, 2.05999, 2.03402, 2.00556, 1.97382, 1.93768, 1.8955, 1.84489, 1.78233, 1.70268, 1.59881, 1.4614, 1.27974, 1.04439, 0.752256, 0.41463, 0.066664, -0.233995, -0.086314, 3.17062, 3.16967, 3.16843, 3.16696, 3.16531, 3.16326, 3.1609, 3.15818, 3.15509, 3.15144, 3.14724, 3.14251, 3.13714, 3.13099, 3.12409, 3.11633, 3.10776, 3.09823, 3.08778, 3.07634, 3.06396, 3.05063, 3.03635, 3.02117, 3.00508, 2.98813, 2.97032, 2.95163, 2.932, 2.9113, 2.88932, 2.86575, 2.84015, 2.8119, 2.78017, 2.74385, 2.70146, 2.65096, 2.58954, 2.5132, 2.41607, 2.28962, 2.12187, 1.89749, 1.60012, 1.21877, 0.759553, 0.262943, -0.189689, -0.115999, 4.31988, 4.31809, 4.31587, 4.31348, 4.31066, 4.3074, 4.3037, 4.29941, 4.29456, 4.289, 4.28275, 4.27578, 4.26808, 4.25947, 4.24999, 4.2397, 4.22849, 4.21644, 4.20357, 4.1899, 4.1755, 4.16041, 4.14467, 4.12834, 4.11141, 4.09387, 4.07566, 4.05664, 4.03659, 4.01521, 3.99207, 3.96661, 3.93807, 3.90549, 3.86765, 3.82296, 3.76939, 3.7043, 3.62418, 3.52424, 3.39773, 3.23483, 3.02125, 2.7373, 2.3592, 1.86579, 1.25406, 0.56664, -0.0878743, -0.153733, 5.90461, 5.90139, 5.89832, 5.89449, 5.89011, 5.88503, 5.87932, 5.87296, 5.86597, 5.85797, 5.84937, 5.83988, 5.82962, 5.81857, 5.80674, 5.79418, 5.78097, 5.76716, 5.75284, 5.7381, 5.72292, 5.70739, 5.69152, 5.67528, 5.65856, 5.64123, 5.62307, 5.60374, 5.58285, 5.55983, 5.53401, 5.50452, 5.47026, 5.42987, 5.38163, 5.32336, 5.25226, 5.16477, 5.05624, 4.92052, 4.74932, 4.53099, 4.24878, 3.87883, 3.38995, 2.74952, 1.94201, 1.00872, 0.0888485, -0.202516, 8.09087, 8.08648, 8.08088, 8.07522, 8.06868, 8.06132, 8.0533, 8.04435, 8.03496, 8.02459, 8.01364, 8.00191, 7.98958, 7.97676, 7.96341, 7.94966, 7.9357, 7.92146, 7.90707, 7.89254, 7.87787, 7.863, 7.84783, 7.83218, 7.81579, 7.79838, 7.77951, 7.75865, 7.73518, 7.7083, 7.67703, 7.64015, 7.59618, 7.54323, 7.47894, 7.40032, 7.30355, 7.18371, 7.03446, 6.84753, 6.61207, 6.31346, 5.93146, 5.4375, 4.7929, 3.95297, 2.88726, 1.63282, 0.363783, -0.266547, 11.1062, 11.0999, 11.0924, 11.0843, 11.0755, 11.0656, 11.0554, 11.0441, 11.0325, 11.0203, 11.0078, 10.9948, 10.9816, 10.9682, 10.9547, 10.9413, 10.9278, 10.9145, 10.9011, 10.8876, 10.874, 10.8599, 10.8452, 10.8295, 10.8125, 10.7935, 10.7721, 10.7474, 10.7187, 10.6847, 10.6443, 10.5957, 10.5368, 10.4652, 10.3776, 10.2699, 10.1367, 9.97137, 9.76509, 9.50654, 9.181, 8.76923, 8.24557, 7.57512, 6.71071, 5.59503, 4.18122, 2.50053, 0.768703, -0.351648, 15.269, 15.26, 15.2498, 15.2395, 15.2286, 15.2169, 15.2047, 15.1923, 15.1796, 15.1667, 15.1539, 15.141, 15.1284, 15.1158, 15.1035, 15.0913, 15.0793, 15.0673, 15.0551, 15.0425, 15.0293, 15.0152, 14.9997, 14.9825, 14.9628, 14.9401, 14.9135, 14.882, 14.8446, 14.7996, 14.7453, 14.6794, 14.5991, 14.501, 14.3804, 14.2318, 14.0478, 13.8192, 13.5337, 13.1758, 12.7252, 12.1559, 11.4341, 10.5155, 9.3421, 7.84262, 5.95276, 3.69813, 1.34687, -0.46588, 21.0162, 21.005, 20.9938, 20.9818, 20.9697, 20.957, 20.9443, 20.9321, 20.9197, 20.9077, 20.8957, 20.8843, 20.8733, 20.8623, 20.8516, 20.8409, 20.8301, 20.8189, 20.807, 20.7943, 20.7802, 20.7644, 20.7463, 20.7252, 20.7005, 20.6713, 20.6364, 20.5945, 20.544, 20.483, 20.4088, 20.3185, 20.2081, 20.0727, 19.9063, 19.7009, 19.4464, 19.13, 18.735, 18.2396, 17.6162, 16.8287, 15.8317, 14.5672, 12.9619, 10.9277, 8.3816, 5.34554, 2.15671, -0.62042, 28.9575, 28.9459, 28.9331, 28.9207, 28.9084, 28.8969, 28.8852, 28.874, 28.863, 28.8532, 28.8431, 28.8333, 28.8239, 28.8144, 28.8048, 28.7948, 28.7842, 28.7726, 28.7598, 28.7452, 28.7284, 28.7089, 28.6859, 28.6586, 28.626, 28.5869, 28.5398, 28.4829, 28.414, 28.3302, 28.2282, 28.1037, 27.9513, 27.7644, 27.5342, 27.2501, 26.8982, 26.4604, 25.9139, 25.2287, 24.3664, 23.2775, 21.8997, 20.1551, 17.9491, 15.1712, 11.717, 7.6084, 3.27636, -0.830785};
}

void read_flow_field_raw(
    const string& flow_field_filename,
    vector<float>& mean_grid_def,
    vector<float>& cv_grid_def,
    vector<float>& flow_field_unravelled
    ) 
    {
    
    ifstream indata;
	indata.open(flow_field_filename);
	
    string line;
	vector<float> values;
	
    uint rows = 0;
	while (getline(indata, line)) {
        stringstream lineStream(line);
        string cell;
        while (getline(lineStream, cell, ' ')) {
            if (rows == 0) {
                mean_grid_def.push_back(stof(cell));
            } else if (rows == 1) {
                cv_grid_def.push_back(stof(cell));
            } else {
                flow_field_unravelled.push_back(stof(cell));
            }
        }
        ++rows;
	}
}


// 
// Open vcf
//
void readVcf(
    string filename, 
    vector<unique_ptr<SegregatingSite>>& ret,
    vector<string>& samples_in_order,
    string samples_filename,
    vector<int>& samples_indices,
    string samples_filename_against,
    vector<int>& samples_against_indices
    ) {
    vector<string> samples_names;

    vector<string> required_samples;
    vector<string> samples_names_against;
    
    // Read samples list, if available
    if (samples_filename.size() > 0) {
        ifstream indata;                
        try {
            indata.open(samples_filename);
            if (indata.fail()) {
                cout << boost::format("Error in ifstream::open - %s\n") % samples_filename;
                exit(-1);
            }            
        } catch (const std::ios_base::failure& ex) {
            cout << "Caught exception: " << ex.what() << std::endl;
            exit(-1);
        }

        string line;
        while (getline(indata, line)) {
            boost::algorithm::trim(line);
            required_samples.push_back(line);
        }            
    }

    // Read second samples list, if available
    if (samples_filename_against.size() > 0) {
        ifstream indata;
        try {
            indata.open(samples_filename_against);
            if (indata.fail()) {
                cout << boost::format("Error in ifstream::open - %s\n") % samples_filename_against;
                exit(-1);                
            }            
        } catch (const std::ios_base::failure& ex) {
            cout << "Caught exception: " << ex.what() << std::endl;
            exit(-1);
        }

        string line;
        while (getline(indata, line)) {
            boost::algorithm::trim(line);
            required_samples.push_back(line);
            samples_names_against.push_back(line);
        }            
    }
    int n_samples_required = required_samples.size();

    // Resize the result
    ret.resize(0);

    // TODO CHECK ERRORS
    auto file = hts_open(filename.c_str(), "r");
    if (file == NULL) {
        cout << boost::format("Error in hts_open - %s\n") % filename;
        exit(-1);                
    }    
    
    auto header = bcf_hdr_read(file);
    if (header == NULL) {
        cout << boost::format("Error in bcf_hdr_read\n");
        exit(-1);                
    } 

    if (required_samples.size() > 0) {
        string list_of_samples = boost::algorithm::join(required_samples, ",");
        int bcf_hdr_set_samples_error = bcf_hdr_set_samples(header, list_of_samples.c_str(), 0);
        if (bcf_hdr_set_samples_error) {
            cout << boost::format("Error: bcf_hdr_set_samples failed; possibly a required sample ID doesn't exist in VCF.\n");
            exit(-1);
        }
    }

    auto record = bcf_init();
    if (header == NULL) {
        cout << boost::format("Error in bcf_init\n");
        exit(-1);                
    } 

    int n_samples = bcf_hdr_nsamples(header);
    if (n_samples == 0) {
        cout << boost::format("Error: bcf_hdr_nsamples returned 0\n");
        exit(-1);    
    }

    int n_relevant_sample = 0;
    vector<bool> sample_is_required;
    for (int i = 0; i < n_samples; i++) {
        samples_names.push_back(header->samples[i]);
        if (n_samples_required > 0) {
            sample_is_required.push_back(
                std::find(required_samples.begin(), required_samples.end(), header->samples[i]) != required_samples.end()
            );
        } else {
            sample_is_required.push_back(true);
        }
        if (sample_is_required.back()) {
            samples_in_order.push_back(header->samples[i]);

            if (std::find(samples_names_against.begin(), samples_names_against.end(), header->samples[i]) != samples_names_against.end()) {
                samples_against_indices.push_back(n_relevant_sample);
            } else {
                samples_indices.push_back(n_relevant_sample);
            }
            n_relevant_sample++;
        }
    }
    if (n_samples_required == 0) {
        n_samples_required = n_samples;
    }

    int32_t *gt_arr = NULL, ngt_arr = 0;
    int ngt;

    vector<int8_t> int_alleles;

    IndeterminateProgressBar bar{
        option::BarWidth{70},
        option::FontStyles{
            std::vector<FontStyle>{FontStyle::bold}},
    };

    while (true) {
        // Read record
        int retcode = bcf_read(file, header, record);
        if (retcode < 0) {
            if (retcode < -1) {
                std::cerr << "Failed to parse VCF record: " << retcode << std::endl;
                exit(-1);
            }
            break;
        }


        bcf_unpack(record, BCF_UN_ALL);

        // If not SNP, skip
        if (!bcf_is_snp(record)) {
            continue;
        }

        // Reset vector
        //int_alleles.resize(0);
        int_alleles.resize(n_samples_required * 2);
        int int_alleles_index = 0;

        // Get genotypes
        ngt = bcf_get_genotypes(header, record, &gt_arr, &ngt_arr);
        if (ngt <= 0) {
            cout << "No genotypes!" << std::endl;
            return;
        }

        bool het = false;
        int max_ploidy = ngt / n_samples;
        for (int i = 0; i < n_samples; i++) {
            if (!sample_is_required[i]) {
                continue;
            }

            int32_t *ptr = gt_arr + i*max_ploidy;
            for (int j = 0; j < max_ploidy; j++)
            {
                // if true, the sample has smaller ploidy
                if (ptr[j] == bcf_int32_vector_end) break;

                // missing allele
                if (bcf_gt_is_missing(ptr[j])) {
                    //int_alleles.push_back(-1);
                    int_alleles[int_alleles_index] = -1;
                    int_alleles_index++;
                } else {
                    // the VCF 0-based allele index
                    int32_t al = bcf_gt_allele(ptr[j]);
                    //int_alleles.push_back(al);
                    int_alleles[int_alleles_index] = al;
                    int_alleles_index++;

                    if (al > 0) {
                        het = true;
                    }
                }

                // is phased?
                // int is_phased = bcf_gt_is_phased(ptr[j]);                
            }            
        }

        if (het) {
            ret.push_back(make_unique<SegregatingSite>());
            ret.back()->pos = record->pos;
            ret.back()->alleles = int_alleles;        
        }

        // Arbitrary number to make progress not seem so round :)
        if (ret.size() % 4587 == 0) {
            bar.set_option(option::PostfixText{
                std::to_string(ret.size()) + " sites"
            });
            bar.tick();
        }
    }

    bar.set_option(option::PostfixText{
        std::to_string(ret.size()) + " sites"
    });
    bar.mark_as_completed();
    indicators::show_console_cursor(true);

    free(gt_arr);
    bcf_destroy(record);
    bcf_hdr_destroy(header);
    hts_close(file);
}

void readMask(
    string filename,
    vector<pair<int, int>>& global_mask
) {
    fstream bedfile(filename);
    // TODO: check errors

    string bedline;
    while (getline(bedfile, bedline)) {
        vector<string> bedparts;
        boost::algorithm::split(bedparts, bedline, boost::is_any_of("\t"));
        global_mask.push_back(make_pair(stoi(bedparts[1]), stoi(bedparts[2])));  // TODO: Check errors
    }
}

void readMasks(
    string filename,
    unordered_map<string, vector<pair<int, int>>>& mask_map,
    const vector<string>& sample_names
    ) 
    {
    ifstream fin(filename);
    // TODO: check errors

    string line;
    while (getline(fin, line)) {
        // Split line into tab-separated parts
        vector<string> parts;
        boost::algorithm::split(parts, line, boost::is_any_of("\t"));

        if ((std::find(sample_names.begin(), sample_names.end(), parts[0]) != sample_names.end())) {
            mask_map.emplace(parts[0], vector<pair<int, int>>());
            readMask(parts[1], mask_map[parts[0]]);
            // cout << boost::format("Mask for %s - %d segments\n") % parts[0] % mask_map[parts[0]].size();
        }
    }
    fin.close();

}